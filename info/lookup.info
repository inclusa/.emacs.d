This is lookup.info, produced by makeinfo version 4.13 from lookup.texi.

INFO-DIR-SECTION The Emacs editor and associated tools
START-INFO-DIR-ENTRY
* Lookup: (lookup).             Lookup, a Search Interface.
END-INFO-DIR-ENTRY

   This file documents Lookup, a search interface.

   Copyright (C) 1997-2000 Nishida Keisuke Copyright (C) 2009 Lookup
Development Team

   Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

   Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, provided that the
entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

   Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions, except that this permission notice may be stated in a
translation approved by the Free Software Foundation.


File: lookup.info,  Node: Top,  Next: Getting Started,  Prev: (dir),  Up: (dir)

Lookup User's Manual
********************

`Lookup' is dictionary-lookup tool written in Emacs Lisp.  It can
easily search various information resources including commercial CD-ROM
dictionary, on-line dictionary server, or freely-available on-line
dictionaries.

   This manual describes Lookup 2.0.

* Menu:

* Getting Started::
* Dictionary Setup::
* How to Lookup::
* Advanced Features::
* Customization::
* Information::
* Search Agents::
* Concept Index::
* Command Index::
* Variable Index::


File: lookup.info,  Node: Getting Started,  Next: Dictionary Setup,  Prev: Top,  Up: Top

1 何はともあれ使ってみる
***********************************

* Menu:

* Quick Prepare::
* Quick Setup::
* Quick Example::
* Quick Startup::
* Quick Search::
* Quick View::


File: lookup.info,  Node: Quick Prepare,  Next: Quick Setup,  Prev: Getting Started,  Up: Getting Started

1.1 Quick Prepare
=================

まず、何はなくとも辞書が必要です。とはいえたぶん、このプログラムを使おう
と思われた時点で既に、利用したい辞書は決まっているでしょうね。辞書をもう
用意しているという方は、本節は読み飛ばして次へ進んで下さい。

もしこれから辞書を探そうと思っている、あるいはどの辞書を選べばいいか迷っ
ているという方は、Lookup のホームページや配布物に含まれる FAQ にいくつ
かアドバイスがありますので、参考にして下さい。

   あるいは、「辞書はいらないから、とにかく Lookup
を使ってみたいんだっ!」
という奇特な方も中にはおられるかもしれません。そのような方のために一つ、
Lookup を手っ取り早く試すための材料として、Emacs に附属の Zippy ファイル
を紹介しておきましょう。


File: lookup.info,  Node: Quick Setup,  Next: Quick Example,  Prev: Quick Prepare,  Up: Getting Started

1.2 設定すべきこと
=========================

さて、辞書の用意が出来たら Lookup の設定です。しかし待った。Lookup が対
応している辞書には数多くの種類があります。まず始めに、辞書との実際の連絡
係となる "検索エージェント" を選ばねばなりません。

   このバージョンの Lookup
には、以下の検索エージェントが含まれています。こ
れらは利用する辞書の種類や利用形態の違いによって、それぞれ異なる性格を持っ
ています。それぞれの説明を参照して、自分の目的に合ったものをピックアップ
して下さい。

用語検索に向いたエージェント
------------------------------------------

`ndic'
     dictdフォーマット辞書からの直接検索 (*note ndic::)

`ndeb'
     EPWING などに準拠した CD-ROM 書籍の個人利用 (*note ndeb::)

`ndpdic'
     PDIC仕様に準拠した辞書データの利用 (*note ndpdic::)

`ndbtonic'
     BTONIC仕様に準拠した辞書データの利用 (*note ndbtonic::)

`ndsary'
     Suffix Array ツールを利用した、テキスト辞書の検索 (*note ndsary::)

`ndsimple'
     テキスト辞書を直接バッファに読み込んでの検索 (*note ndsimple::)

`ndtp'
     NDTP サーバを用いた、ネットワーク辞書の利用 (*note ndtp::)

`ndict'
     DICT サーバを用いた、ネットワーク辞書の利用 (*note ndict::)

ランダムハウス英語辞典Windows版を検索するエージェント
----------------------------------------------------------------------------

`ndsrd'
     ランダムハウス英語辞典Windows版を検索する (*note ndsrd::)

補助的なエージェント
------------------------------

`ndmecab'
     日本語の読みや品詞を調べる (*note ndmecab::)

`ndspell'
     スペルチェックやスペル検索 (*note ndspell::)

`ndcookie'
     cookie ファイルから検索 (*note ndcookie::)

利用するエージェントが決まったら、説明に従って準備を整えて下さい。辞書
の設定やインストール、外部プログラムが必要になることもあります。Emacs
の設定についても例も挙げられているはずですから、自分の場合の設定内容を
把握して下さい。

   以上が終われば、`~/.emacs.el'
ファイルに設定を書き込みます。基本的には 変数 `lookup-search-agents'
をセットするだけです。利用したい検索エー
ジェントの数だけ、設定を並べることが出来ます。

   例えば、NDTP サーバがホスト `dserver' で動いており、CD-ROM 辞書を
`/cdrom' にマウントしているのであれば、設定は次のようになります。

     (setq lookup-search-agents '((ndtp "dserver") (ndeb "/cdrom")))


File: lookup.info,  Node: Quick Example,  Next: Quick Startup,  Prev: Quick Setup,  Up: Getting Started

1.3 簡単な設定例
======================

さあ、辞書の設定は終わりました。しかし実際には、管理者の方が特別に設定を
行なってでもいない限り、他にもいくつかの設定が必要となります。実用上、
`~/.emacs.el' には次のように書いておくとよいでしょう。

     ;;;
     ;;; Lookup Setup Example
     ;;;

     ;; オートロードの設定
     (autoload 'lookup "lookup" nil t)
     (autoload 'lookup-region "lookup" nil t)
     (autoload 'lookup-word "lookup" nil t)
     (autoload 'lookup-select-dictionaries "lookup" nil t)

     ;; キーバインドの設定
     (global-set-key "\M-\?" 'lookup-word)
     (global-set-key "\M-\"" 'lookup-select-dictionaries))

     ;; 検索エージェントの設定
     (setq lookup-search-agents '((ndtp "dserver") (ndeb "/cdrom")))

   最初の段落では、Lookup
の各コマンドを実行したとき、自動的にプログラムを
読み込むように設定しています。もし Emacs 起動時に初期化を済ませてしまう
ことがお好みなら、代わりに `(require 'lookup)' などと書いておけばよ
いでしょう。

二番目の段落では、コマンドを実行するためのキーバインドを定義しています。
これは必須ではありませんが、上記のコマンドはよく用いるので、適当なキーに
割り当てておくと便利です。各自で好みのキーにバインドして下さい。

最後の段落では、利用する検索エージェントを設定しています。これは前節で説
明した通りです。各自のものに合わせて設定して下さい。

   なお、Lookupの設定は `~/.lookup/init.el' にも記述することができま
す。autoload と キー設定をのぞく全てのlookupに関する設定は、このファイ
ルに記述することが推奨されます。


File: lookup.info,  Node: Quick Startup,  Next: Quick Search,  Prev: Quick Example,  Up: Getting Started

1.4 起動するには
======================

お待たせしました。それでは Lookup を動かしていきましょう。まず手始めに
`M-x lookup' として、プログラムが起動することを確認して下さい。


     M-x lookup <RET> =>

     ======== Lookup Windows ========================================
     ----------------------------------------------------------------
     Type `m' to select, `u' to unselect, `?' for help.

     % Identifier          Title                Method
     - ----------          -----                ------
     * ndtp:dserver/KOKUGO 国語辞典               =<>...
     * ndeb:/cdrom/EIWA    英和辞典               =<>...
     * ndeb:/cdrom/WAEI    和英辞典               =<>...





     ----------------------------------------------------------------
     -J:%*  Lookup: *Dictionary List*      (Select Abbrev)--L5--C0--A
     ----------------------------------------------------------------
     ================================================================

   上のような画面が表示されましたか?
もしエラーが起こったり、あるいは一覧が
表示されないようなら、辞書やプログラムの設定に失敗しているかもしれません。
問題点を確認して、もう一度やり直してみて下さい。よくあるミスなら FAQ に
情報があるかもしれませんし、わからないことがあればメールで尋ねてもらって
も一向に構いません。

   このとき表示されるバッファを "辞書一覧バッファ" と呼びます。上の例で
は、「国語辞典」「英和辞典」「和英辞典」の三つの辞書が使えるようになって
います。以下、これらの辞書を例に説明していきます。

   行頭に `*'(アスタリスク)のマークが付いているのは、その辞書を検索に
用いるものとして、辞書が選択されているということを表わしています。上の場
合、三つ全ての辞書から一度に検索が行なわれるという意味になります。通常、
最初は利用出来る全ての辞書が選択状態になっています。

   `Identifier' とあるコラムには、辞書を特定するための名称が表示されて
います。これは利用している検索エージェント(AGENT)と、辞書の所在
(LOCATION)、及び辞書名(NAME)とを組み合わせて、 `AGENT:LOCATION/NAME'
という形で表わされます。本書ではこれを "辞書ID" と呼び、`NAME'
で表わされる "辞書名" とは区 別します。また同様に、`AGENT+LOCATION'
の部分は "エージェ ントID" と呼びます。

   `Title' とあるコラムには、辞書のタイトルが表示されます。これは検索
結果の出力などに、普段用いられるものです。オプション設定により自由に変更
することも可能ですから、後で見やすいものに変えておきましょう。

   最後の `Methods' とあるコラムには、辞書が対応している検索方式が示さ
れています。これは各種検索方式がそれぞれ一つの記号で表わされており、上の
場合はどの辞書も「前方一致検索」「後方一致検索」「完全一致検索」に対応し
ているという意味になります。詳しくは後ほど説明します。

このバッファでは辞書の一覧を確認する以外にも、辞書の選択状態を切り替える
などいくつかの操作が可能となっています。試しに `?' を押してみて下さ
い。別のバッファにコマンドの一覧が表示されましたね? Lookup の各バッファ
では、`?' キーを押すことで簡単なコマンド一覧が出るようになっているの
で、ちょっと調べたいときにご利用下さい。

   どこでも使えるキー操作をもう一つ。`q' を押せば、そのバッファを抜けて
元の作業に戻ることが出来ます。さあ、それでは辞書の確認はこの辺にして、次
のステップに進みましょう。


File: lookup.info,  Node: Quick Search,  Next: Quick View,  Prev: Quick Startup,  Up: Getting Started

1.5 検索してみよう
=========================

いよいよ検索を行ないます。最も代表的な検索コマンドとして、`M-x
lookup-region' と `M-x lookup-pattern' の二つがあります。それぞれ
リージョンの内容、及びミニバッファからの入力を検索語に、検索を開始します。


     M-x lookup-pattern <RET> test <RET> =>

     ======== Lookup Windows ========================================
     ----------------------------------------------------------------
     国語辞典            -!-テスト
     英和辞典            test


     ----------------------------------------------------------------
     -J:%*  Lookup: *Entry* {*:test} [2]      (Entry Abbrev)--L1--C20
     ----------------------------------------------------------------
     テスト
     [名] 1. 試験....




     ----------------------------------------------------------------
     -J:%*  Lookup: *Content* {テスト}      (Content Abbrev)--L1--C0-
     ----------------------------------------------------------------
     ================================================================

   二つのバッファが表示されました。上側のバッファは "Entry バッファ" と
言い、検索の結果見付かったエントリを一覧します。ここでは二つのエントリが
表示されています。-!- とあるのは、そこにポイントがあるという印です。
つまり、現在一つ目の「テスト」というエントリが選択されています。

   下側のバッファは "Content バッファ" と言い、選択されているエントリの
本文が表示されます。Entry バッファで <SPC> を押していけば、内容が次々
と表示されます。

   上の例では `test' という検索語で検索を行ないましたが、ここで入力を
次のようにすることで、検索方式を様々に切り換えることが出来ます。

word
     単語検索。標準の検索方法。

word*
     前方一致検索。指定した文字列で始まる語を見付ける。

*word
     後方一致検索。指定した文字列で終わる語を見付ける。

*word*
     部分一致検索。指定した文字列を含んだ語を見付ける。

'word'
     完全一致検索。指定した文字列と一致する語を見付ける。

@word
     キーワード検索。指定した文字列をキーワードに持つエントリを見付ける。

ひとまずこれだけ覚えておけば十分でしょう。検索方式は他にもまだいくつか
ありますが、詳しくは後ほど説明します。ここではもう少し、検索結果の見方に
ついて話を進めていきます。


File: lookup.info,  Node: Quick View,  Prev: Quick Search,  Up: Getting Started

1.6 結果を見ていく
=========================

以下、Entry バッファでよく用いられるコマンドについて説明します。キー操作
を忘れてしまったときには、`?' を押せば確認出来ます。

   * 本文のスクロール
    `<SPC>'
          一画面分、先に進む。

    `<DEL>'
          一画面分、前に戻る。

    `<'
          バッファの先頭へ戻る。

    `>'
          バッファの最後へ進む。

   * エントリの選択
    `n'
          次のエントリに移動。

    `p'
          前のエントリに移動。

    `M-n'
          検索履歴を次に進む。

    `M-p'
          検索履歴を前に戻る。

   * 本文に対する操作
    `s'
          Content バッファで `isearch-forward' を実行。

    `w'
          Content バッファの内容をキルリングにセーブ。

    `L'
          リファレンスを一覧。

   まだまだあります。見付かったエントリが多くて一覧が見辛いときには、
`v' を押すことで "Overview モード" に入ります。 Overview モードでは
Content バッファがクローズされ、Entry バッファを
広く見ることが出来ます。Overview モードを抜けるには、もう一度 `v'
とするか、あるいは <SPC> を押して下さい。

   逆にエントリの本文を広く見たいときには、`o' が使えます。これは
Lookup
のウィンドウをフレーム一杯に広げ、一時的に表示領域を広く取ります。 `q'
でバッファを閉じれば、次からまた元に戻ります。

   一度バッファを閉じた後でも、もう一度 `M-x lookup' とすることで、最後
に Lookup を抜けたときの状態が取り戻されます。`q' と `M-x lookup'
を繰り返すことで、何度でも検索結果を見直すことが出来ます。

   検索結果を表示したまま最初のバッファに戻りたいときには、`r' を押せば
OK です。`h' を連打すれば、Entry バッファと Content バッファの間を
往復することも出来ます。

   これだけ覚えておけば、日常の作業は十分に行なえるでしょう。しかし
Lookup
には、場合によって役に立ついくつかのコマンドが他にも用意されています。
次章以降で、それらを含む Lookup の完全な機能について説明します。


File: lookup.info,  Node: Dictionary Setup,  Next: How to Lookup,  Prev: Getting Started,  Up: Top

2 辞書の準備を整える
*****************************

Lookupを使用する前に、辞書を用意する必要あります。本章では、辞書のイン
ストール方法および準備の方法を簡単に説明します。本章ではユーザがすぐに
辞書が使えるよう、詳細の説明はしません。

* Menu:

* Free Dictionaries::           ネットワークで配布されている辞書を利用する。
* CD-ROM Dictionaries::         市販されているCD-ROM辞書を利用する。
* Network Dictionary::          ネットワーク上の辞書を利用する。
* Miscellaneous Dictionaries::  スペルチェッカやフォーチュンクッキーを使用する。


File: lookup.info,  Node: Free Dictionaries,  Next: CD-ROM Dictionaries,  Prev: Dictionary Setup,  Up: Dictionary Setup

2.1 無料の辞書
===================

Lookupは、ネットワークで配布されているフリーな辞書の活用を積極的に推奨
しています。無料辞書の一覧は、LookupのWebページのDictionary Collection
(http://lookup.sourceforge.net/info/dictionaries.shtml)
に一覧されています。

* Menu:

* SDIC Dictionaries::           SDICフォーマットの辞書。
* dictd Dictionaries::          dictdフォーマットの辞書。
* FreePWING Dictionaries::      無料のEPWINGフォーマットの辞書。
* PDIC Dictionaries::           無料のPDICフォーマットの辞書。
* Other XML Dictionaries::      他のXMLフォーマットなどの無料辞書


File: lookup.info,  Node: SDIC Dictionaries,  Next: dictd Dictionaries,  Prev: Free Dictionaries,  Up: Free Dictionaries

2.1.1 SDIC Dictionaries
-----------------------

"SDIC フォーマット" とは、Emacs で使えるシンプルな辞書検索ソフト SDIC
(http://pine.kuee.kyoto-u.ac.jp/member/tsuchiya/sdic/index.html)
で採用されている行指向の辞書形式です。

SDIC 辞書の準備
....................

SDIC 辞書は `.sdic' を拡張子に持つ単一のファイルからなります。
単純ゆえの柔軟性で、三つの検索方式で利用することができます。

  1. 直接読み込み方式 (ndsimpleエージェント)

     辞書を Emacs のバッファに読み込んで、直接検索を行なう方式です。
     メモリを圧迫するなどのデメリットもありますが、Emacs
     以外の外部コマンドを 必要としないため Windows
     ユーザにも手軽に利用出来るという利点があります。

  2. grep 方式 (ndgrepエージェント)

     外部コマンドとして `fgrep' もしくは `grep' を用いて
     検索を行なう方式です。十分に高速で便利なため、通常はこれを利用します。

  3. suffix array 方式 (ndsary エージェント)

     外部コマンドとして Sary (http://www.namazu.org/sary/)
     というソフトウェアを用いて検索を行なう方式です。
     これはあらかじめ特別なインデックスを生成することで検索を高速化します。
     5MB
     を超えるような大きなサイズの辞書を用いる場合には、こちらの利用が
     有効かもしれません。

   grep 方式を用いるには、外部コマンドとして `fgrep' もしくは `grep'
を実行パスに置いて下さい。一般的な UNIX システムであれば
標準で附属しています。array 方式を用いるには、Sary をインストールして
`mksary' でインデックス（拡張子`.ary'のファイル）を生成して下さい。

   辞書は好きなディレクトリに置いて構いません。direct
方式を用いる場合は、 Emacs 19.34 以降なら辞書を `gzip'
などで圧縮しておくことも出来ます。 `~/.emacs.el' で
`(auto-compression-mode t)' としておいて下さい。

SDIC 辞書の利用
....................

SDIC 辞書は、Lookup の ndsimple, ndgrep または ndsary エージェントで
利用することが出来ます。
辞書を置いたディレクトリを引数にして、例えば次のように設定して下さい。

     (setq lookup-search-agents '((ndsary "/usr/local/dict")))

   この場合は、ディレクトリに含まれる全ての `.sdic.ary' 拡張子を持つ
`.sdic' ファイルが辞書として認識されます。


File: lookup.info,  Node: dictd Dictionaries,  Next: FreePWING Dictionaries,  Prev: SDIC Dictionaries,  Up: Free Dictionaries

2.1.2 dictd Dictionary
----------------------

"dictd フォーマット" とは、DICT プロトコル(RFC 2229)に対応した
辞書サーバである dictd (http://www.dict.org) が独自に採用している
辞書形式です。単純かつ十分に実用的なフォーマットです。

dictd 辞書の準備
.....................

dictd 辞書は、`.index' を拡張子に持つインデックス・ファイルと、 `.dict'
を拡張子に持つデータ・ファイルの二つからなります。
両方のファイルを適当な同じディレクトリに置いて下さい。

   `.dict' ファイルは dictd に附属の `dictzip' というコマンドで
圧縮することが出来ます。圧縮されたファイルは、多くの場合、
`.dict.dz'という拡張子を持っています。詳しくは dictd のマニュアル
を参照して下さい。

dictd 辞書の利用
.....................

dictd 辞書は、Lookup の ndic もしくは ndict エージェントで利用することが
出来ます。ndic では辞書の直接検索を行ない、ndict では DICT プロトコルを
用いてサーバから検索を行ないます。ndic の方がお手軽ですが、ndict の方が
より高速な検索が可能です。

  1. ndic を用いる場合

     辞書を置いたディレクトリを引数にして、例えば次のように設定して下さい。

          (setq lookup-search-agents '((ndic "/usr/local/dict")))

     ディレクトリに含まれる全ての `.index'
     ファイルが辞書として認識されます。 先の SDIC
     辞書と混在してあっても構いません。辞書を圧縮してある場合には、
     `dictzip' コマンドを実行パスの通ったディレクトリにインストールして
     おいて下さい。

  2. ndict を用いる場合

     あらかじめ DICT
     サーバを立ち上げておいて、次のように設定して下さい。

          (setq lookup-search-agents '((ndict "dict-server")))

     DICT サーバの立ち上げについては、*note DICT Server::
     を参照して下さい。


File: lookup.info,  Node: FreePWING Dictionaries,  Next: PDIC Dictionaries,  Prev: dictd Dictionaries,  Up: Free Dictionaries

2.1.3 FreePWING Dictionaries
----------------------------

FreePWING (http://www.sra.co.jp/people/m-kasahr/freepwing/)
は、EPWING互換の辞書を生成する無償のツールです。このツールを使った多数のフリーな辞書が配布されています。
*Note EB/EPWING Dictionary::.


File: lookup.info,  Node: PDIC Dictionaries,  Next: Other XML Dictionaries,  Prev: FreePWING Dictionaries,  Up: Free Dictionaries

2.1.4 PDIC辞書
----------------


File: lookup.info,  Node: Other XML Dictionaries,  Prev: PDIC Dictionaries,  Up: Free Dictionaries

2.1.5 その他のXML辞書
---------------------------


File: lookup.info,  Node: CD-ROM Dictionaries,  Prev: Free Dictionaries,  Up: Dictionary Setup

2.2 CD-ROM 辞書
=================

Lookup では多くの市販の CD-ROM 辞書を利用することが出来ます。利用可能な
辞書の一覧が、辞書データベース
(http://lookup.sourceforge.net/info/dictionaries.shtml)
のページにまとめられているので参照して下さい。 Lookup
は標準で、電子ブックや EPWING 規約に準拠した CD-ROM 書籍の利用に
対応しています。別配布の専用プログラムを用意することで、独自フォーマット
の CD-ROM 辞書についても利用出来るものがあります。

* Menu:

* EB/EPWING Dictionary::        E-Book/EPWING 辞書
* Original Dictionary::         独自フォーマットの辞書


File: lookup.info,  Node: EB/EPWING Dictionary,  Next: Original Dictionary,  Prev: CD-ROM Dictionaries,  Up: CD-ROM Dictionaries

2.2.1 E-Book/EPWING Dictionary
------------------------------

電子ブックや EPWING 規約は、日本で一般的な電子辞書の共通規格です。
パッケージの外箱に書かれた「EBXA」とか「EPWING」といったロゴが
目印です。(以下、まとめて EPWING 辞書と呼ぶ)

Preparing EPWING Dictionary
...........................

EPWING 辞書は CD-ROM から直接検索せずとも、あらかじめハードディスクに
コピーしておくことで、より便利に高速に検索を行なえます。ディスク容量に
余裕のある人は、認められた範囲内でコピーしておくといいでしょう。

   このとき、太田氏作の EPWUTIL
(ftp://ftp.nerimadors.or.jp/pub/epwutil/) や、笠原氏作の EB ライブラリ
(http://www.sra.co.jp/people/m-kasahr/eb/) に含まれる `ebzip'
といったツールを用いることで、辞書のサイズを
小さく収めることが可能です(1/2 〜 1/10 程度)。詳しくは、それぞれの
プログラムに附属のドキュメントを参照して下さい。

Using EPWING Dictionary
.......................

EPWING 辞書は、Lookup の ndeb もしくは ndtp エージェントで利用することが
出来ます。ndeb は個人での CD-ROM 辞書利用に向いており、ndtp
はネットワークを 介した辞書の共有に向いています。

  1. ndeb を用いる場合

     検索を行なうための外部コマンドとして eblook
     (http://openlab.ring.gr.jp/lookup/eblook/) が必要です。
     あらかじめ入手してインストールしておいて下さい。

     もし外字を表示出来る環境にないか、外字を用いたくないという場合には、
     外字置き換え設定ファイルである Appendix
     (http://www.sra.co.jp/people/m-kasahr/eb/) も入手して下さい。

     Lookup の設定は、例えば次のようにして下さい。

          (setq lookup-search-agents '((ndeb "/cdrom" :appendix "/your/appendix")))

  2. ndtp を用いる場合

     あらかじめ NDTP
     サーバを立ち上げておいて、次のように設定して下さい。

          (setq lookup-search-agents '((ndtp "dserver")))

     NDTP サーバの立ち上げについては、*note NDTP Server::
     を参照して下さい。


File: lookup.info,  Node: Original Dictionary,  Prev: EB/EPWING Dictionary,  Up: CD-ROM Dictionaries

2.2.2 独自フォーマットの辞書
---------------------------------------

現在、小学館の「ランダムハウス英語辞典」から検索が行なえるようになって
います。興味のある方は、 電子辞書オープンラボ
(http://openlab.ring.gr.jp/edict/) の edict ML で尋ねて下さい。


File: lookup.info,  Node: Network Dictionary,  Next: Miscellaneous Dictionaries,  Up: Dictionary Setup

2.3 ネットワーク辞書を利用する
===========================================

電子辞書をネットワークで共有して利用したい場合は、辞書サーバを立ち上げて
検索サービスを提供するのが一つの方法です。また、インターネットには自由に
アクセス出来る辞書サーバも存在し、それらにアクセスすることも可能です。

   Lookup が対応している辞書サーバは、"NDTP サーバ" と "DICT サーバ"
の二つです。ここではそれぞれについて、 サーバの紹介と Lookup
の設定について説明します。

* Menu:

* NDTP Server::                 Network Dictionary Transport Protocol.
* DICT Server::                 DICT the Internet dictionary server.


File: lookup.info,  Node: NDTP Server,  Next: DICT Server,  Prev: Network Dictionary,  Up: Network Dictionary

2.3.1 NDTP Server
-----------------

NDTP(Network Dictionary Transport
Protocol)とは、主に日本で使われている、 CD-ROM
辞書をネットワークで利用するための検索用プロトコルです。

Preparing NDTP Server
.....................

NDTP サーバのソフトウェアとしては、現在 NDTPD
(http://www.sra.co.jp/people/m-kasahr/ndtpd/)
が主に用いられています。附属のドキュメントを参照して、
インストール、及び設定を行なって下さい。

NDPTD

Using NDTP Server
.................

例えば次のように設定して下さい。

     (setq lookup-search-agents '((ndtp "dserver")))


File: lookup.info,  Node: DICT Server,  Prev: NDTP Server,  Up: Network Dictionary

2.3.2 DICT Server
-----------------

DICT とは、RFC 2229 で定義されている辞書検索のためのプロトコルです。

DICT サーバの準備
.......................

DICT サーバとして、DICT プロジェクト (http://www.dict.org) により dictd
が公開されています。附属のドキュメントを参照して、インストール、
及び設定を行なって下さい。

DICT サーバの利用
.......................

例えば次のように設定して下さい。

     (setq lookup-search-agents '((ndict "dict.org")))


File: lookup.info,  Node: Miscellaneous Dictionaries,  Prev: Network Dictionary,  Up: Dictionary Setup

2.4 その他の辞書
======================

Lookup
では他にも、次のような特殊な検索エージェントが標準で利用可能です。
好みに応じて準備を整えて下さい。

* Menu:

* ndnmz agent::                 Namazu
* ndmecab agent::               日本語の読みを調べる
* ndspell agent::               スペルチェックとスペル検索
* ndcookie agent::              今日の運勢をチェックする


File: lookup.info,  Node: ndnmz agent,  Next: ndmecab agent,  Prev: Miscellaneous Dictionaries,  Up: Miscellaneous Dictionaries

2.4.1 Namazuで全文検索を行う
------------------------------------


File: lookup.info,  Node: ndmecab agent,  Next: ndspell agent,  Prev: ndnmz agent,  Up: Miscellaneous Dictionaries

2.4.2 日本語の読みを調べる
------------------------------------

`ndmecab'
は、日本語の漢字の読みを調べるための検索エージェントです。漢字を
含む検索語が指定された場合、漢字かな変換プログラム Mecab を用いてその
読みを調べます。

   漢字の含まれる検索語を指定した場合、漢字かな変換プログラム Mecab
を用い てその読みを調べて表示します。

   Mecab は次のところからという名称で入手可能です。IPA辞書と同時に
インストールして、mecabコマンドをパスに通すようにしてください。

     `http://mecab.sourceforge.net/'

   次のように設定して下さい。

     (setq lookup-search-agents '((ndmecab)))


File: lookup.info,  Node: ndspell agent,  Next: ndcookie agent,  Prev: ndmecab agent,  Up: Miscellaneous Dictionaries

2.4.3 スペルチェックとスペル検索
---------------------------------------------

`ndspell' は、Lookup
でスペルチェックを行なうための検索エージェントです。
もし検索語を普通に検索して何も見付からなかった場合、スペルチェックを
行なってからもう一度再検索を試みます。

   ndspell は外部コマンドとして Aspell と grep を利用しています。Aspell
は 対話型のスペルチェックコマンドで、grep は言わずと知れた UNIX
ツールです。 どちらも GNU の FTP サイトなどから入手可能です。

     `ftp://ftp.gnu.org/pub/GNU/'

   このエージェントは単独では用いずに、他の辞書と組み合わせて、例えば
次のように設定して下さい。

     (setq lookup-search-agents '((ndic "/usr/local/dict") (ndspell)))


File: lookup.info,  Node: ndcookie agent,  Prev: ndspell agent,  Up: Miscellaneous Dictionaries

2.4.4 今日の運勢をチェックする
------------------------------------------

`ndcookie' は、検索時に cookie
ファイル(引用集)から一句抜き出して表示する
ための検索エージェントです。`fortune' プログラムと同様の働きをします。

   利用出来るファイルの例としては、Emacs に附属の Zippy
ファイルがあります。 次のように設定して下さい。

     (setq lookup-search-agents '((ndcookie "yow.lines")))


File: lookup.info,  Node: How to Lookup,  Next: Advanced Features,  Prev: Dictionary Setup,  Up: Top

3 それでは検索してみよう
***********************************

この章では、Lookup のインストール後に行なわなければならない設定項目につ
いて説明します。プログラムのインストールについては、Lookup 配布物に附属
のファイル INSTALL を参照して下さい。設定後の更なるカスタマイズについて
は、*note Customization:: を参照して下さい。

* Menu:

* Setup Dictionary::            辞書の準備を整える
* Setup Agent::                 辞書に合わせて設定する
* Setup Command::               新しい検索コマンドを作る
* Setup Others::                その他の主な設定項目
* Setup Example::               初期化ファイルの設定例
* Setup Variables::             セットアップ変数一覧
* Setup Functions::             セットアップ関数一覧


File: lookup.info,  Node: Setup Dictionary,  Next: Setup Agent,  Prev: How to Lookup,  Up: How to Lookup

3.1 辞書の準備を整える
===============================

Lookup では、以下の辞書の利用をサポートしています。自分の利用したい辞書
を確認し、それぞれの下準備を整えて下さい。


File: lookup.info,  Node: Setup Agent,  Next: Setup Command,  Prev: Setup Dictionary,  Up: How to Lookup

3.2 辞書に合わせて設定する
=====================================

* Menu:

* Setup Basis::                 基本的な設定方法
* Setup Option::                各種オプションの設定
* Setup Restriction::           利用する辞書の制限
* Setup Package::               補助パッケージの利用


File: lookup.info,  Node: Setup Basis,  Next: Setup Option,  Prev: Setup Agent,  Up: Setup Agent

3.2.1 基本的な設定方法
------------------------------

Lookup を利用するには、まず始めに辞書との直接のインターフェースとなる
"検索エージェント" を選ぶ必要があります。利用出来る検索エージェント は
*note Search Agents:: に一覧があるので、そちらを参照してどれを用いるか
決めて下さい。

   用いるエージェントが決まれば、変数 `lookup-search-agents' を設定し
ます。これはエージェントの設定のリストで、リストの各要素は次の形式を取り
ます。

     (CLASS LOCATION [OPTION...])

   CLASS には、エージェントの種類をシンボルで指定します。これは `ndic'
とか `ndtp' とか言うエージェントの名前そのものです。

   LOCATION には、辞書の所在を文字列により表します。何を指定すべきか
は利用するエージェントにより異なるので、それぞれのエージェントについての
説明を参照して下さい。これは省略可能な場合もあります。

   OPTION は、エージェントに対する省略可能なオプションです。これは
パラメータを名前付きで与えるためのもので、タグとなるシンボルと、値となる
任意のオブジェクトとの cons によって表わします。いくつでも指定できます。

   具体的な例を挙げましょう。例えば、次の設定では、

     (ndtp "dserver" :port 2010 :account "user@domain")
   エージェントの種類は `ndtp'、辞書の所在は `"dserver"' で、
オプション `:port' に値 `2010' を、オプション `:account' に 値
`"user@domain"' をそれぞれ指定しています。

各エージェントで具体的に何を設定すべきかは、それぞれのエージェントについ
ての説明を参照して下さい。オプションについては、すべてのエージェントで共
通に使えるものもあります。*note Agent Options:: を参照して下さい。

   上のような設定を、利用するエージェントの数だけ並べたものが、実際の
`lookup-search-agents' の値となります。例えば一つの典型的な例として、
次のような設定が考えられるでしょう。

     ;; ホスト dserver で NDTP サーバが動いており、
     ;; スペルチェックの機能を有効とする場合。
     (setq lookup-search-agents
           '((ndtp "dserver") (ndspell)))


File: lookup.info,  Node: Setup Option,  Next: Setup Restriction,  Prev: Setup Basis,  Up: Setup Agent

3.2.2 各種オプションの設定
------------------------------------

先の節では、エージェントにオプションを指定するやり方について説明しました
が、オプションは辞書にも設定することが可能です。実際、Lookup のエージェ
ントや辞書はほとんど、何らかのオプション指定によってカスタマイズされるよ
うになっています。オプションの設定は今後いろいろな場面で出てくるので、こ
こで一度詳しく説明しておきます。

   Lookup で "オプション" とは、名前付きパラメータのことを意味します。
つまり特定のシンボルをタグとして、それに対応させる形で値を設定します。
これは典型的には、`(KEY . VALUE)' という cons の形で 表現されます。

   先程はエージェントのオプションとして、`lookup-search-agents' に
オプションの cons のリストを設定しましたが、辞書の場合には変数
`lookup-dictionary-options-alist' を用いることが出来ます。

   例えば辞書にオプション `:title' を設定することを考えてみましょう。
これは辞書のタイトルを変更するための共通オプションです。次のようにします。

     (setq lookup-dictionary-options-alist
           '(("ndtp+dserver:KOKUGO" ':title "国語辞典")
             ("ndeb+/cdrom:EIWA" ':title "英和辞典")
             ("ndeb+/cdrom:WAEI" ':title "和英辞典")))

先のエージェント・オプションの設定法とよく似ているのがわかると思います。
辞書を特定するために、辞書ID(*note Quick Startup::)を文字列で指定してい
ます。

しかしこの方法では、設定が増えてくると、ごちゃごちゃとして少々わかりづら
くなってしまいます。そこで実際のオプション設定のために便利な関数
`lookup-set-dictionary-option' を用意しています。この関数は間接的に
`lookup-dictionary-options-alist' を書き換えます。実用上はこの関数
を利用し、`lookup-dictionary-options-alist' は直接に変更しない方が
いいでしょう。上の例は、次の式と等価になります。

     (lookup-set-dictionary-option "ndtp+dserver:KOKUGO" ':title "国語辞典")
     (lookup-set-dictionary-option "ndeb+/cdrom:EIWA" ':title "英和時点")
     (lookup-set-dictionary-option "ndeb+/cdrom:WAEI" ':title "和英辞典")

   ただし、これは関数なので、Lookup
のプログラム・ファイルをロードしてから
でないと利用出来ません。そこでプログラムのロード直後に設定が完了するよう、
Lookup 専用の初期化ファイル `~/.lookup/init.el'
を用いることが出来ます。こ れは後でまた詳しく説明します。(*note Setup
Example::)

   また、全ての辞書に対してデフォルトのオプションを設定するために、変数
`lookup-default-dictionary-options' が利用出来ます。オプションの cons
をリストにして並べます。例えば次のように設定すれば、単語の語尾を
取り除く処理をデフォルトで行なうようになります。

     (setq lookup-default-dictionary-options
           '((:stemmer .  stem-english)))

全ての辞書に対してではなく、ある特定のエージェントにだけデフォルトを設定
したいこともあります。これは単純に、辞書オプションをエージェント・オプショ
ンと同じに並べるだけです。辞書オプションが指定されなかった場合、次にエー
ジェント・オプションから同じものが探し出されます。ただし `:title' の
設定など、共有が無意味なものについてはその限りではありません。

辞書オプションと同様に、エージェント・オプションのためにも設定用の変数・
関数が用意されています。それぞれ `lookup-agent-options-alist'、
`lookup-set-agent-option'、`lookup-default-agent-options' です。
例えば辞書を無効化するには、次のように書くことも出来ます。

     (setq lookup-search-agents '((agent "location")))
     (lookup-set-agent-option "agent+location" ':disable '("KOKUGO" "WAEI"))

   なお、オプション設定の優先順位は次の通りです。

   * 辞書オプション
       1. lookup-dictionary-options-alist

       2. lookup-default-dictionary-options

       3. エージェント・オプションから継続して検索

   * エージェント・オプション
       4. lookup-search-agents 設定時のオプション

       5. lookup-agent-options-alist

       6. lookup-default-agent-options


File: lookup.info,  Node: Setup Restriction,  Next: Setup Package,  Prev: Setup Option,  Up: Setup Agent

3.2.3 利用する辞書の制限
---------------------------------

変数 `lookup-search-agents' で設定されたエージェントは通常、Lookup
の起動と同時に全て初期化され、そこに含まれる全ての辞書が利用されるものと
して選択されます。しかし場合によっては、そのうち一部の辞書しか必要としな
いこともあるかもしれません。エージェントに次の共通オプションを与えること
で、あらかじめ有効とする辞書を制限することが出来ます。

`:enable'
     有効とする辞書名のリスト。

`:disable'
     無効とする辞書名のリスト。

   例えば、あるエージェントが三つの辞書 `KOKUGO', `EIWA', `WAEI'
を持っているとしましょう。この内 `EIWA' だけを
有効にしたいのであれば、次のように設定します。

     (agent "location" :enable ("EIWA"))

   あるいは

     (agent "location" :disable ("KOKUGO" "WAEI"))

   ここで指定すべき辞書名は、`M-x lookup' として表示される辞書一覧の
バッファから知ることが出来ます(*note Quick Startup::)。最初にオプション
なしで起動して含まれる辞書を確認し、後から設定を変更するとよいでしょう。

あるいは、無効にはしたくないが、滅多に用いないという辞書もあるかもしれま
せん。上と同様に、次の共通オプションを与えることで、辞書の初期選択状態を
変えることが出来ます。

`:select'
     選択する辞書名のリスト。

`:unselect'
     未選択にする辞書名のリスト。

   未選択にされた辞書は、後から選択することで利用可能となります。
(*note Specify Dictionary::)


File: lookup.info,  Node: Setup Package,  Prev: Setup Restriction,  Up: Setup Agent

3.2.4 補助パッケージの利用
------------------------------------

Lookup では様々な種類の辞書を扱いますが、各エージェントでは対応しきれな
い辞書毎の細かな調整を行なうために、"補助パッケージ" というものが利
用出来ます。これは辞書に固有の設定をまとめた設定ファイル集です。

補助パッケージがなくとも検索に支障はありませんが、それを用いることで出力
がより見やすく整形されたり、不足する設定が補われたりと、使い勝手が良くな
ることは期待出来ます。

   補助パッケージは、`support-XXXX.el' というファイル名で提供されてお
り、使用する辞書に応じて自動的に読み込まれて設定されます。各補助パッケー
ジのファイルには、詳細な利用方法がコメントでかかれている場合があります
ので必要に応じて参照ください。


File: lookup.info,  Node: Setup Command,  Next: Setup Others,  Prev: Setup Agent,  Up: How to Lookup

3.3 新しい検索エージェントを作る
==============================================

既存のソースを参考にしてください。もし分からないことがあれば、
メイリングリスト ( <lookup-list@lists.sourceforge.net> )
に質問してみるとよいかもしれません。


File: lookup.info,  Node: Setup Others,  Next: Setup Example,  Prev: Setup Command,  Up: How to Lookup

3.4 その他の主な設定項目
==================================

* Menu:

* Setup Query Expansion::       拡張検索の準備


File: lookup.info,  Node: Setup Query Expansion,  Prev: Setup Others,  Up: Setup Others

3.4.1 拡張検索の準備
---------------------------

日頃から検索をしていると、入力のちょっとした誤りくらいは自動的に修正して
検索を行なってくれると有り難く思います。Lookup には、入力された検索語を
補正するためのいくつかの機能が備わっています。

* Menu:

* Stemming::                    単語の語尾を取り除く
* Spell Checking::              スペルチェックを行なう
* Universal Query Expansion::   任意の拡張検索


File: lookup.info,  Node: Stemming,  Next: Spell Checking,  Prev: Setup Query Expansion,  Up: Setup Query Expansion

単語の語尾を取り除く
..............................

英語などで、単語の複数形や過去形などに付く余分な文字列を取り除き、原型を
推測するための処理を "stemming" といいます。これが出来ると、文字列の
修正なしに検索を行なえるので便利です。Lookup では、辞書オプション
`:stemmer' を指定することで、stemming を行なうよう設定出来ます。

   オプション `:stemmer' には、stemming を行なう関数を指定します。標準
では、英単語用の stemming 関数 `stem-english' が備えられています。
次のように設定して下さい。

     (lookup-set-dictionary-option "agent:DICT" ':stemmer 'stem-english)

   これで指定した辞書から検索を行なうときには、stemming
が行なわれるように なります。具体的には、次の手順で検索されます。

  1. 元の検索語で検索する。

     始めは入力をそのまま検索します。それで見付かれば何も問題ありません。

  2. 設定された stemming 関数で原型を推測する。

     stemming
     関数は、文字列を受け取ってその原型の候補のリストを返します。
     Lookup
     は候補のそれぞれについて、辞書から単語が見付かるまで検索を繰り返
     します。検索語が単純な複数形や過去形をしていれば、一度のやり直しで結果に
     たどり付けるはずです。

  3. 共通の語頭を持った似た単語を探し出す。

     例えば、`lexicographer' という語は載っていないが、 `lexicography'
     なら載っているという辞書があるかもしれません。 stemming
     ではそのようなケースに対応することは出来ませんが、参考程度にそ
     の情報を示してくれると親切です。そこで、ある程度の語長を持つ語を検索した
     場合に限って、Lookup は共通語頭を持つ語の検索に挑戦します。

これでも何も見付からなければ検索を諦めます。その場合、二回か三回の検索処
理が無駄になりますが、遠隔地の辞書サーバにアクセスしているのでもない限り、
これは大したコストではありません。よってあらかじめ厳格なスペルチェックを
行なうよりも、この方式を用いる方が、効率的に自動補正を行なえます。


File: lookup.info,  Node: Spell Checking,  Next: Universal Query Expansion,  Prev: Stemming,  Up: Setup Query Expansion

スペルチェックを行なう
.................................

語尾だけの問題ではなく、綴りそのものを間違えたのでは何も見付かりません。
そこで検索語のスペルチェックを行ない、その上で検索を行なう機能が欲しくな
ります。

   Lookup のスペルチェック機能は、検索エージェント `ndspell'
として実現され ています(*note ndspell::)。`lookup-search-agents'
の設定において、 リストに ndspell
を加えることでスペルチェックが行なわれるようになります。

   ここでリストのどの位置に ndspell を加えるかが問題となります。ndspell
を
置く位置を変えることで、スペルチェックを行なうタイミングを変えることが
可能です。

   リストの最初に ndspell
を置くと、いきなりスペルチェックを始めます。スペ
ルミスがあまりにも多く、スペルチェックをしてから検索を始めたいという人に
は、この方法が向いているかもしれません。

しかし、検索の度に毎回スペルチェックを行なうというのは効率的ではありませ
ん。そこで ndspell をリストの最後に置くことで、まず他の辞書で一度検索を
行ない、それでも何も見付からなかったときのみ、ndspell でスペルチェックを
行なうようにすることが出来ます。ndspell は、そのような利用を想定して作ら
れています。

   もしどうしてもスペルチェックを行ないたいということがあれば、Entry
バッファ で `g' を押して再検索を行なうことで、ndspell
にスペルチェックを強制 することも可能です。より詳しくは、*note
ndspell:: を参照して下さい。


File: lookup.info,  Node: Universal Query Expansion,  Prev: Spell Checking,  Up: Setup Query Expansion

任意の拡張検索
.....................

辞書の性質によっては、ユーザーが任意の置き換えを定義したい場合があるかも
知れません。そのような場合には、:expander オプションと :expand-filter オ
プションが利用できます。

   例えば、次のような設定ができます。

     (lookup-set-dictionary-option "agent:DICT" ':expander 'foo-expander)
     (lookup-set-dictionary-option "agent:DICT" ':expand-filter 'foo-filter)

   ただし、`foo-expander' は、文字列を取り、文字列のリストを返す関数で
なければなりません。また、`foo-filter' は、文字列とエントリのリスト
を取り、エントリのリストを返す関数でなければなりません。

   このように設定すると、Lookup は以下のような検索処理を行います。

  1. 元の検索語で検索する。

  2. 検索語を `foo-expander' によって置換して再検索を行う。

  3. 得られたエントリを、`foo-filter' を用いてフィルタリングする。

   前節で説明した漢字ひらがな拡張検索機能は、次のような設定と同値です。

     (lookup-set-dictionary-option "agent:DICT" ':expander 'lookup-kanji-get-readings)
     (lookup-set-dictionary-option "agent:DICT" ':expand-filter 'lookup-kanji-filter)


File: lookup.info,  Node: Setup Example,  Next: Setup Variables,  Prev: Setup Others,  Up: How to Lookup

3.5 初期化ファイルの設定例
=====================================

以下は、Lookup の具体的な設定例です。設定はすべて `~/.emacs.el' で行な
うことも可能ですが、専用の初期化ファイルとして `lookup-init-file'
(`~/.lookup/init.el') が Lookup
起動時に読み込まれるので、これを用いること にします。

* Menu:

* Initialization::              初期化プロセスの概要
* ~/.emacs.el::                 `~/.emacs.el' の設定
* ~/.lookup/init.el::           `~/.lookup/init.el' の設定
* site-start.el::               サイト毎の共通設定


File: lookup.info,  Node: Initialization,  Next: ~/.emacs.el,  Prev: Setup Example,  Up: Setup Example

3.5.1 初期化プロセスの概要
------------------------------------

まず Lookup の実行過程について大まかに説明します。

  1. Emacs の起動

  2. `~/.emacs.el' の読み込み

  3. Lookup の起動

  4. Lookup プログラム・ファイル(`*.elc')の読み込み

  5. Lookup 初期化ファイル(`~/.lookup/init.el')の読み込み (存在すれば)

  6. `lookup-load-hook' の実行

  7. Lookup 初期化開始

   このように Lookup のプログラム・ファイルは `~/.emacs.el' よりも後から
読み込まれるため、これまで説明したオプションやパッケージの設定用関数を
用いるには、通常、次のいずれかの方法を用います。

  1. `~/.lookup/init.el' を用いる。

     これが一番、普通のやり方です。`~/.lookup/init.el' を利用すれば、
     余計なことを気にせずに全ての設定を行なえます。

  2. `lookup-load-hook' を用いる。

     サイトで共通の設定を行なうような場合、`~/.lookup/init.el'
     を用いるわけには いきません。あるいは、全てを `~/.emacs.el'
     で行うというポリシーの人も
     いるかもしれません。そのような目的のために、`~/.lookup/init.el'
     と同様の タイミングで初期化を行なうための hook `lookup-load-hook'
     を用いる ことが出来ます。次のようにします。

          ;; load-hook の設定
          (add-hook 'lookup-load-hook 'init-lookup)

          ;; Lookup の設定内容
          (defun init-lookup ()
            (setq lookup-search-agents '((agent) ...))
            (lookup-set-agent-option "agent" ':key 'value)
            ...
            )


File: lookup.info,  Node: ~/.emacs.el,  Next: ~/.lookup/init.el,  Prev: Initialization,  Up: Setup Example

3.5.2 `~/.emacs.el' の設定
-----------------------------

`~/.lookup/init.el'
を用いるにしても、キーバインドの設定等、いくつかのものは `~/.emacs.el'
で行なうことが必要です。以下にその例を示します。

     ;;;
     ;;; Lookup
     ;;;

     ;; キーバインドとオートロードの設定
     (define-key ctl-x-map "l" 'lookup)
     (define-key ctl-x-map "y" 'lookup-region)
     (define-key ctl-x-map "\C-y" 'lookup-pattern)
     (autoload 'lookup "lookup" nil t)
     (autoload 'lookup-region "lookup" nil t)
     (autoload 'lookup-pattern "lookup" nil t)

     ;; 自作コマンドを利用する場合
     (define-key help-map "\C-e" 'english-search-pattern)
     (autoload 'english-search-pattern "lookup" nil t)

     ;; 初期化ファイルを変更する場合
     (setq lookup-init-file "~/.lookup")


File: lookup.info,  Node: ~/.lookup/init.el,  Next: site-start.el,  Prev: ~/.emacs.el,  Up: Setup Example

3.5.3 `~/.lookup/init.el' の設定
-----------------------------------

`~/.lookup/init.el' で辞書の設定を行ないます。これまで説明した通りです。

     ;;; .lookup --- setup for Lookup                -*- emacs-lisp -*-

     ;; 検索エージェントの設定
     (setq lookup-search-agents '((ndeb "/cdrom") (ndspell)))

     ;; 補助パッケージの読み込み
     (setq lookup-package-directory "~/emacs/lookup/packages")
     (lookup-use-package "ndeb+/cdrom" "mydict")

     ;; オプションの設定
     (lookup-set-dictionary-option "ndeb+/cdrom:EIWA" ':title "英和辞典")

     ;; 外字利用の設定
     (setq lookup-use-bitmap t)

     ;;; .lookup ends here


File: lookup.info,  Node: site-start.el,  Prev: ~/.lookup/init.el,  Up: Setup Example

3.5.4 サイト毎の共通設定
---------------------------------

Lookup の設定をサイトで共有するのであれば、`site-start.el' ファイル
に設定を加えます。次のような感じにすればいいでしょう。

     ;;;
     ;;; Lookup Site Start
     ;;;

     ;; オートロードの設定
     (autoload 'lookup "lookup" nil t)
     (autoload 'lookup-region "lookup" nil t)
     (autoload 'lookup-pattern "lookup" nil t)

     ;; load-hook の設定
     (add-hook 'lookup-load-hook 'site-start-lookup)

     (defun site-start-lookup ()
       ;; 検索エージェントの設定
       (setq lookup-search-agents '((ndtp "dserver")))

       ;; 補助パッケージの設定
       (setq lookup-package-directory "/net/share/emacs/lookup/packages")
       (lookup-use-package "ndtp+dserver" "ourdict")
       )


File: lookup.info,  Node: Setup Variables,  Next: Setup Functions,  Prev: Setup Example,  Up: How to Lookup

3.6 セットアップ変数一覧
==================================

`lookup-init-file'
     Lookup の初期化ファイル名。デフォルトは `~/.lookup/init.el'。
     このファイルは `lookup.el' のロード直後に読み込まれる。

`lookup-load-hook'
     Lookup のロード完了直後に実行される hook。 `lookup-init-file'
     の読み込み直後に実行される。

`lookup-search-agents'
     検索エージェントの設定のリスト。 リストの各要素は次の形式を取る:

          (CLASS LOCATION [OPTION...])

     CLASS には、エージェントの種類をシンボルで指定する。 LOCATION
     には、エージェントの所在を文字列で指定する。 ARG
     は省略可能で、エージェントに対する追加の引数を指定する。 OPTIONS
     は省略可能で、同じく追加のオプションを指定する。

          例: (setq lookup-search-agents
                    '((ndtp "dserver" :port 2010)
                      (ndeb "/cdrom" :enable ("EIWA"))))

`lookup-default-agent-options'
     検索エージェントにデフォルトで与えるオプションのリスト。
     各オプションは、タグとなるシンボルと、値となる任意のオブジェクトとの
     cons によって表わす。

`lookup-agent-options-alist'
     検索エージェントのオプションを設定する連想リスト。 各要素の car
     にはエージェントID(`"CLASS+LOCATION"')を指定し、 cdr
     にはオプションのリストを指定する。

`lookup-default-dictionary-options'
     辞書にデフォルトで与えるオプションのリスト。
     各オプションは、タグとなるシンボルと、値となる任意のオブジェクトとの
     cons によって表わす。

`lookup-dictionary-options-alist'
     辞書のオプションを設定する連想リスト。 各要素の car
     には辞書ID(`"CLASS+LOCATION:NAME"')を指定し、 cdr
     にはオプションのリストを指定する。

`lookup-package-directory'
     補助パッケージが収められるディレクトリ。


File: lookup.info,  Node: Setup Functions,  Prev: Setup Variables,  Up: How to Lookup

3.7 セットアップ関数一覧
==================================

`lookup-set-agent-option' ID TAG VALUE
     検索エージェントのオプションをセットする。 ID
     はエージェントID。TAG はオプションのタグ。 VALUE はセットする値。

`lookup-set-dictionary-option' ID TAG VALUE
     辞書のオプションをセットする。 ID は辞書ID。TAG
     はオプションのキー。 `value' はセットする値。 この関数は
     `lookup-dictionary-options-alist' の値を書き換える。

`lookup-use-package' AGENT-ID PACKAGE-NAME
     補助パッケージをロードする。 AGENT-ID
     は、パッケージを適用するエージェントID。 PACKAGE-NAME
     は、パッケージ名、あるいはパッケージの絶対パス。
     絶対パスでない場合、パッケージは変数 `lookup-package-directory' が
     示すディレクトリに展開しておく必要がある。 この関数は
     `lookup-agent-options-alist' 及び
     `lookup-dictionary-options-alist' の値を書き換える。


File: lookup.info,  Node: Advanced Features,  Next: Customization,  Prev: How to Lookup,  Up: Top

4 より高度な使い方
**************************

この章では、Lookup で検索を行なう方法について詳しく説明します。また、
特定の辞書から情報を得るための方法についても説明します。

* Menu:

* Startup Commands::            起動と終了
* Search String::               文字列検索
* See Result::                  検索結果の眺め方
* Specify Dictionary::          特定の辞書を利用する


File: lookup.info,  Node: Startup Commands,  Next: Search String,  Prev: Advanced Features,  Up: Advanced Features

4.1 起動と終了
===================

最初に Lookup を起動するためのコマンドは `M-x lookup' です。これは
利用出来る辞書の一覧をバッファに表示し、辞書選択モードに入ります。この
バッファでの操作については、*note Specify Dictionary::
を参照して下さい。

   `M-x lookup' を用いずとも、次節の検索コマンドをいきなり実行しても
構いません。一度検索が行なわれると、`M-x lookup' は最後の検索結果を
再表示するようになります。一度 Lookup のウィンドウを閉じた後でも、もう
一度結果を見返すのに使えます。

   Lookup を抜けるためのコマンドは `M-x lookup-suspend' です。これは
Lookup の各ウィンドウをいったん閉じて、検索を中断します。検索を完全に
やめてしまうときには、`M-x lookup-exit' が使えます。これはバッファや
キャッシュの削除、サブプロセスの終了などの作業を行ないます。Lookup の
各バッファでは、これらのコマンドはそれぞれ `q' と `Q' によって
直接、または間接的に呼び出されます。

   Lookup を抜けたとき、変数 `lookup-save-configuration' の値が
`non-nil' であれば、画面が検索を開始したときの状態に戻されます。
これはデフォルトで `t' に設定されています。

   Lookup の初期化ファイルを書き換えたときには、コマンド `M-x
lookup-restart' が利用出来ます。これは Lookup をいったん終了
させた後、`~/.lookup/init.el'
を読み直して再初期化を行ないます。これは通常 `R'
に割り当てられています。


File: lookup.info,  Node: Search String,  Next: See Result,  Prev: Startup Commands,  Up: Advanced Features

4.2 文字列検索
===================

Lookup のもっとも一般的な検索方法は、検索語となる文字列を指定して検索を
行なうことです。以下、これについて詳しく説明します。

* Menu:

* Search Commands::             標準の検索コマンド
* Default Method::              標準の検索方式
* Search Methods::              検索方式のいろいろ


File: lookup.info,  Node: Search Commands,  Next: Default Method,  Prev: Search String,  Up: Search String

4.2.1 標準の検索コマンド
---------------------------------

Lookup 標準の検索コマンドには、代表して次の五つのものがあります。

`M-x lookup-pattern'
     ミニバッファからの入力を検索語に検索を開始します。
     デフォルトの検索語として、ポイント位置の単語が取り出されます。

     この時、変数 `lookup-use-mecab' の値が `non-nil' であれば、 Mecab
     プログラムを利用して日本語の単語もそれなりに切り出します。
     これはデフォルトでは `nil' になっています。

     最近の Emacs であれば、デフォルトの検索語はミニバッファで `M-n'
     とすることで編集することが出来ます。

`M-x lookup-region'
     リージョンの文字列を検索語に検索を開始します。

`M-x lookup-word'
     ポイント位置の単語を検索語に検索を開始します。

``lookup-selection''
     マウスによる選択領域を検索語に検索を開始します。

     これをマウスの適当なボタンにバインドしておくと、それをクリックすることで、
     そのときのマウスによる選択領域を検索語に検索を行なうことが出来ます。選択
     領域は Emacs
     のバッファである必要はなく、他のアプリケーション上であって
     も構いません。

     これはイメージとしては、X Window System
     でのマウスによるコピー＆ペースト
     とよく似ています。最初にコピーしたい領域をマウスで選択し、その後、コピー
     先のバッファで中ボタンをクリックすることでコピーは完了します。それと同様
     に、次のように設定しておくことで、Emacs
     のバッファにペーストする代わりに、 Lookup
     が検索を行なうようになります。

          (global-set-key [mouse-2] 'lookup-selection)

     ただし、こうしてしまうと、標準のペーストの動作が使えなくなったりするので、
     実際には別のクリックにバインドしておくとよいでしょう。

``lookup-secondary''
     マウスによる第二選択領域を検索語に検索を開始します。

     Emacs の Secondary Selection の機能を用いて検索を行ないます。 (1)

     "Secondary Selection" とは、ポイントを移動させることなくマウスで
     特定領域を選択するための機能で、デフォルトでは `M-Mouse-1' に
     バインドされています。*note (emacs)Secondary Selection::.

     これをうまく用いることで、マウスのダブルクリックやドラッグによって
     文字列を選択するだけで検索が行なえるようになっています。もし標準の
     バインドを置き換えてよいのであれば、次のように設定して下さい。

          (global-set-key [M-down-mouse-1] 'lookup-secondary)
          (autoload 'lookup-secondary "lookup" nil t)

     新たに定義するのであれば、例えば次のようにします。

          (global-set-key [S-mouse-1] 'mouse-start-secondary)
          (global-set-key [S-drag-mouse-1] 'mouse-set-secondary)
          (global-set-key [S-down-mouse-1] 'lookup-secondary)
          (autoload 'lookup-secondary "lookup" nil t)

     後者の例では、Shift
     キーを押しながら左のダブルクリックでカーソル位置の
     単語を、同じく領域をドラッグすることで選択部を検索するようになります。

   これら四つのコマンドには更に、`-full-window' と `-other-frame'
を付加したバリエーションがあります。つまり、全部で以下の十五の標準検索
コマンドが用意されています。

`M-x lookup-pattern'
     検索語を入力して検索する。

`M-x lookup-pattern-full-screen'
     `M-x lookup-pattern' と同じ。結果を画面全体で表示する。

`M-x lookup-pattern-other-frame'
     `M-x lookup-pattern' と同じ。結果を別のフレームで表示する。

`M-x lookup-region'
     リージョンの文字列を検索語に検索する。

`M-x lookup-region-full-screen'
     `M-x lookup-region' と同じ。結果を画面全体で表示する。

`M-x lookup-region-other-frame'
     `M-x lookup-region' と同じ。結果を別のフレームで表示する。

`M-x lookup-word'
     ポイント位置の単語を検索語に検索する。

`M-x lookup-word-full-screen'
     `M-x lookup-word' と同じ。結果を画面全体で表示する。

`M-x lookup-word-other-frame'
     `M-x lookup-word' と同じ。結果を別のフレームで表示する。

`lookup-selection'
     マウスでの選択領域を検索語に検索する。

`lookup-selection-full-screen'
     `lookup-selection' と同じ。結果を画面全体で表示する。

`lookup-selection-other-frame'
     `lookup-selection' と同じ。結果を別のフレームで表示する。

`lookup-secondary'
     Secondary Selection の文字列を検索語に検索する。

`lookup-secondary-full-screen'
     `lookup-secondary' と同じ。結果を画面全体で表示する。

`lookup-secondary-other-frame'
     `lookup-secondary' と同じ。結果を別のフレームで表示する。

   `-other-frame' となっている各コマンドを用いたときのフレームの
パラメータは、変数 `lookup-frame-alist' により与えられます。

   ---------- Footnotes ----------

   (1) 現在、XEmacs では動作しません。たぶん。


File: lookup.info,  Node: Default Method,  Next: Search Methods,  Prev: Search Commands,  Up: Search String

4.2.2 標準の検索方式
---------------------------

`M-x lookup-pattern' で検索したい単語を入力したり、 `M-x lookup-region'
などで検索語を指定したときの標準の検索方式を "単語検索"
と呼びます。これは実際には固有の検索方式ではなくて、
後述する各種の検索方式を間接的に呼び出すためのものです。

通常、検索語と完全にマッチしたエントリを探し出すことを「完全一致検索」と
言いますが、Lookup では多種類の辞書を扱う関係から、これをデフォルトとし
てしまうのでは少し問題があります。例えば `emacs' という単語を検索す
るとき、辞書によっては見出し語として `GNU Emacs' としか持たないため
に、それが見付からないということがあります。これは辞書側の問題だと言えば
そうかもしれませんが、やはりそれでは不便なので、少し工夫が必要です。

   もし辞書が `GNU Emacs' という見出し語しか持たなくとも、完全一致検索
ではなく「キーワード検索」でということなら、それを見付け出すことも出来る
かもしれません。そのため標準の検索方式としては、辞書によって実際の検索方
式を切り換えながら検索してくれるのが便利です。そのため単語検索は、状況に
応じて実際の振る舞いを適当に変化させるようになっています。

   単語検索が実際に行なう検索方式は、変数 `lookup-default-method'
により設定することが出来ます。これはデフォルトでは `exact'、つまり
完全一致検索となっています。これを前方一致検索にしたければ `prefix'
とします。可能な検索方式とそれに対応したシンボル名については、 *note
Search Methods:: を参照して下さい。

いくつかの検索エージェントでは、デフォルトの検索方式を上書きして、例えば
キーワード検索を行なうように設定されています。詳しくはエージェントの各節
を参照して下さい。また、特定のエージェントや辞書での検索方式を変えるには、
辞書オプション `:default-method' を用いることが出来ます。


File: lookup.info,  Node: Search Methods,  Prev: Default Method,  Up: Search String

4.2.3 検索方式のいろいろ
---------------------------------

文字列を指定する検索の中でも特に、`M-x lookup-pattern' のように特定
のパターンを入力して行なう検索のことを、Lookup では "パターン検索"
と呼びます。パターン検索では、次のような特殊なパターンを指定することで、
様々に検索方式を切り換えることが可能です。それぞれの検索方式には固有の
シンボル名と記号が関連付けられており、いくつかの場所で利用されます。

word
単語検索 (`default', `~')
     標準の検索方式です。これは実際には、下記のいずれかの検索方式を間接的に
     呼び出すようになっています。*Note Default Method::.

'word'
完全一致検索 (`exact', `=')
     与えられた文字列と完全に一致する見出し語を持つエントリを検索します。
     この例では `word' や `Word' などが見付かります。

word*
前方一致検索 (`prefix', `<')
     与えられた文字列を見出し語の先頭に持つようなエントリを検索します。
     この例では `wordage' や `wording' などが見付かります。

*word
後方一致検索 (`suffix', `>')
     与えられた文字列を見出し語の末尾に持つようなエントリを検索します。
     この例では `keyword' や `headword' などが見付かります。

*word*
部分一致検索 (`substring', `-')
     与えられた文字列を見出し語の一部に含むようなエントリを検索します。
     この例では `unwordy' や `swordsman' などが見付かります。

w*o?d
グロブパターン
     上の三つを更に進めた表現として、任意のグロブパターンが指定出来ます。
     つまり文字 `*' が任意の文字列とマッチし、文字 `?' が任意の
     一文字とマッチします。この例では `word' や `womanhood' などが
     見付かります。

     この検索パターンは、実際にはパターンを正規表現に変換して検索を行ないます。
     今の例では `^w.*o.d$' のように変換されます。従って、これを用いるに
     は辞書が次の正規表現検索に対応していなければなりません。

/word/
正規表現検索 (`regexp', `r')
     与えられた正規表現とマッチする見出し語を持つエントリを検索します。
     入力はそのまま検索エージェントに渡されるため、正規表現のスタイルは
     利用するエージェントに依存します。

@word
キーワード検索 (`keyword', `@')
     辞書が見出し語だけでなくエントリ毎のキーワードを持つ場合、このパターンに
     よってそれを検索することが出来ます。何をキーワードとして持つかは利用する
     検索エージェントによって異なるため、それぞれのエージェントについての説明
     を参照して下さい。

/word
全文検索 (`text', `/')
     これは他の検索方式とは少し異なります。他のものは辞書にあらかじめ用意され
     ているインデックスから検索を行ないますが、これは辞書の全体から力ずくで
     検索語を探し出します。そのためしばしば非常に多くの検索時間を必要とする
     ため、この検索パターンを指定すると確認のためのプロンプトが表示されます。

リファレンス (`:reference', `%')
     これは検索方式ではありませんが、同じく記号が割り当てられているのでここで
     説明しておきます。"リファレンス" とは、あるエントリと関連付けられて
     いる別のエントリのことを言います。通常、Web
     ページと同様に、エントリ本文
     から別のエントリへとリンクが張られています。

     他の検索方式を利用したのではなく、リンクを辿ってリファレンスを表示したと
     きには、そのときの検索方式として上の記号が用いられます。

以上の全ての検索方式に辞書が対応しているわけではありません。辞書が対応し
ている検索方式を知るためには、最初に `M-x lookup' としたとき出力され
る辞書一覧バッファを参照して下さい。(*note Specify Dictionary::)

辞書が対応していない検索法が指定された場合には、現在は単純に無視されます。
これは将来的には未対応の通知を出すように変更するかもしれません。


File: lookup.info,  Node: See Result,  Next: Specify Dictionary,  Prev: Search String,  Up: Advanced Features

4.3 検索結果の眺め方
============================

Lookup で検索が行なわれると、その結果は二つのウィンドウに分かれて表示さ
れます。一つは見つかったエントリの一覧を並べるためのもので、もう一つは各
エントリの本文を見るためのものです。以下、これらを見る方法について詳しく
説明します。

* Menu:

* See Entries::                 エントリを順に見る
* See Contents::                本文を詳しく見る
* Make Reference::              リファレンスを参照する
* Cite Contents::               本文を引用する


File: lookup.info,  Node: See Entries,  Next: See Contents,  Prev: See Result,  Up: See Result

4.3.1 エントリを順に見る
---------------------------------

Entry バッファ(*note Quick Search::)には、検索の結果、見付かったエントリ
の一覧が表示されます。`n'(ext) と `p'(revious) を押すことで、ポ
イントを前後に移動して表示するエントリを切り換えることが出来ます。マウス
の中ボタンでクリックすることで、エントリを直接選択することも可能です。

   `v'(iew) により Overview モードに入ります。これは Content バッファの
ウィンドウをクローズし、エントリの一覧を一時的に見やすくします。Overview
バッファでは、`n' と `p' が単にポイントの移動だけを行なうように
なります。もう一度 `v' とするか <SPC> を押すことで、Overview
モードを終了して元の動作に戻ります。

   Lookup
は、過去に行なわれた検索の結果を履歴として記憶しています。過去の
検索結果を参照するには `M-p' を押していって下さい。逆に、元の検索結
果に戻るには `M-n' を押して下さい。


File: lookup.info,  Node: See Contents,  Next: Make Reference,  Prev: See Entries,  Up: See Result

4.3.2 本文を詳しく見る
------------------------------

Content バッファ(*note Quick Search::)には、選択されているエントリの本文
が表示されます。これは <SPC> と <DEL> によって、Entry バッファ内
から前後にスクロールすることが出来ます。バッファの最後(最初)まで達すると、
次(前)のエントリに移動します。また、`<' や `>' によって、本文の
最初と最後に移動することも出来ます。

   `o'(pen) を押すと、Lookup のウィンドウを画面全体に拡げて、Content
バッ ファの内容を広く見ることが出来ます。Lookup
のウィンドウを一度閉じれば、 次からまた元に戻ります。

   `s'(earch) によって、Content バッファで `isearch-forward' を
実行します。これを抜けるには `C-g' などとして下さい。

   現在参照しているエントリの情報を `i'(nfo)
によって知ることが出来ます。 また、`t'(oggle)
によって、本文を整形する前のオリジナルの辞書内容を
見ることが出来ます。これらの情報は本文をカスタマイズする際に利用すること
が出来ます。


File: lookup.info,  Node: Make Reference,  Next: Cite Contents,  Prev: See Contents,  Up: See Result

4.3.3 リファレンスを参照する
---------------------------------------

エントリがリファレンスを持つ場合、`L'(inks) を押すことでそれを新たに
Entry バッファに一覧します。単一のリファレンスのみ参照したい場合には、ま
ず `h' で Content バッファに移動し、<TAB> の連打で目的のリンクに
移動した後、<RET> とすればそれを辿ることが出来ます。あるいは目的のリ
ンクを直接、マウスの中ボタンでクリックしても構いません。


File: lookup.info,  Node: Cite Contents,  Prev: Make Reference,  Up: See Result

4.3.4 本文を引用する
---------------------------

Entry バッファで `w'(rite) を押すと、エントリの本文をキルリングに
保存します。このとき次の変数によりその振る舞いを調節出来ます。

`lookup-cite-style'
     エントリ本文を引用するときのスタイル。

     `asis' にすると、Content バッファの内容がそのままコピーされる。
     `plain' にすると、プレーンテキストとして見やすいよう変換される。
     次のように alist を指定することで、更に細かく設定することも可能。

          ((KEY1 . VALUE1) (KEY2 . VALUE2) ...)

     KEY としては、次のものが指定可能。

    `gaiji'
          外字をコピーするときのスタイル。値として次のものが可能。
         `glyph'
               Content バッファに表示される内容。(`asis')

         `alternate'
               gaiji-table で指定された代替文字。(`plain')

         任意の文字列
               その文字列を利用。

`lookup-cite-header'
     エントリ本文を引用するときのヘッダ。

     コマンド `M-x lookup-entry-cite-content' 及び `M-x
     lookup-content-cite-region' により内容を取り込むとき、
     その先頭に指定した文字列が付け加えられる。 文字列が `%T'
     を含む場合、辞書のタイトルに置き換えられる。

`lookup-cite-prefix'
     エントリ本文を引用するときのプレフィクス。

     コマンド `M-x lookup-entry-cite-content' 及び `M-x
     lookup-content-cite-region' により内容を取り込むとき、
     各行の先頭に指定した文字列が付け加えられる。

   例えば、設定を次のようにしておくと、

     (setq lookup-cite-style '((gaiji . "□")))
     (setq lookup-cite-header "「%T」より\n")
     (setq lookup-cite-prefix "| ")

   次のような内容が保存されます。

     「国語辞典」より
     | テスト
     | □ 1. 試験....

   これらの変数に対応して、それぞれ辞書オプション `:cite-style',
`:cite-header', `:cite-prefix' が指定することで、その設定が
優先的に利用されます。(*note Dictionary Options::)

   また、Content バッファに移動して `w' を押すことで、そのときの
リージョンの文字列だけコピーすることも可能です。 (1)

   ---------- Footnotes ----------

   (1) ただし現在、このとき cite-style の指定は無効です。手抜き・・・


File: lookup.info,  Node: Specify Dictionary,  Prev: See Result,  Up: Advanced Features

4.4 特定の辞書を利用する
==================================

Lookup の設定後、最初に `M-x lookup' とするか、あるいは検索開始後に
Entry バッファ で `S' とすることで、Select モードに入ります。

   このバッファには利用可能な辞書の一覧が表示されます。`%' とある列に
は辞書の選択状態が示されており、`*' が選択、空白(` ')が未選択
であることを表わしています。

   `Identifier' とある列には辞書の ID が示されます。これは主に設定のた
めに用いられ、辞書の属する検索エージェントのクラス(CLASS)とその所
在(LOCATION)、そして辞書名(NAME)を用いて CLASS+LOCATION:NAME
として表されます。

   `title' とある列には、辞書のタイトルが示されます。これは主に表示の
ために用いられ、辞書オプション `:title' によって変更可能です。 (*note
Dictionary Options::)

   `Methods' とある列には、辞書が対応している検索方式が示されます。
ここに並べられる記号の列は、一文字がそれぞれ一つの検索方式を意味していま
す。その対応については、*note Search Methods::
にある一覧を参照して下さい。

   バッファで `?'と入力すると、利用可能なコ
マンドについての簡易ヘルプが表示されます。バッファを抜けるとヘルプも閉じ
られます。

   コマンド `g'で現在のモジュールを初期化
し直し、バッファを更新します。ただし、これはモジュール自体を再設定するわ
けではないので、設定ファイルでモジュールの設定を変えた場合には、
`R'により Lookup を再起動する必要があります。

   `q'でバッファを抜けます。 `Q'で Lookup を終了します。

   `n'と `p'によって、ポイントを上下に 移動します。

   `m'によりその行の辞書を選択し、 `u'により非選択にします。また、 `M-x
lookup-select-toggle-selected'により選択状態をトグルすることも
可能です。

   `a'により、全ての辞書を選択状態 にします。<RET>により、その行の
辞書だけを選択状態にすることも出来ます。

   `d'を押すと、辞書に無効化のマーク が付けられます。これは `x'を押すこ
とで実際に無効化されます。こうして無効化された辞書でも、Lookup を再起動
するか、`g' とすると元に戻ります。辞書を恒久的に無効化するためには、
オプションにより設定して下さい。(*note Setup Restriction::)

   `f'によって、選択状態にある辞書
から検索を行ないます。これは実際には、普通に `M-x lookup-pattern' を
行なうのと同じです。

   `M'により、辞書専用のメニューに移ることが
出来ます。これは実際にはただの Entry バッファで、リファレンスを辿ってい
くことにより辞書を「読む」ことが出来ます。

   `/'とすると、ポイント行の辞書から
全文検索を行ないます。ただしもちろん、辞書が全文検索に対応している必要が
あります。全文検索は完了までに非常に時間が掛かる場合があるので注意して下
さい。(*note Search Methods::)


File: lookup.info,  Node: Customization,  Next: Information,  Prev: Advanced Features,  Up: Top

5 自分好みにカスタマイズ
***********************************

* Menu:

* Customize General::           一般的なカスタマイズ
* Customize Option::            辞書とエージェントのカスタマイズ
* Modules Setting::             辞書のモジュール化と切り替え


File: lookup.info,  Node: Customize General,  Next: Customize Option,  Prev: Customization,  Up: Customization

5.1 一般的なカスタマイズ
==================================

Lookup の全般に関わるカスタマイズ変数の多くは、Custom パッケージを利用す
ることで変更可能です。Lookup を起動後 `M-x customize-group <RET> lookup
<RET>' とすれば、設定出来る変数の一覧を見ることが出来ます。

* Menu:

* Customize Variables::         主なカスタマイズ変数
* Customize Face::              文字装飾のカスタマイズ


File: lookup.info,  Node: Customize Variables,  Next: Customize Face,  Prev: Customize General,  Up: Customize General

5.1.1 主なカスタマイズ変数
------------------------------------

`lookup-default-method'
     デフォルトの検索方式を指定する。

`lookup-frame-alist'
     フレームのパラメータのリスト。

`lookup-fill-column'
     エントリ内容を fill するときの桁数。

`lookup-window-height'
     Entry バッファ等のウィンドウの高さ。

`lookup-save-configuration'
     non-nil を指定すると、Lookup を抜けたときに画面の状態が
     検索開始時のものに戻される。

`lookup-use-mecab'
     non-nil に指定すると、Mecab
     を用いて日本語の検索語の切り出しを行なうよ うになります。*note
     Search Commands:: を参照して下さい。

`lookup-max-hits'

`lookup-max-text'
     表示するエントリの上限数、及びエントリ本文の上限サイズを定めます。
     これらは現在 ndeb でのみ有効です。

`lookup-cite-style'
`lookup-cite-header'
`lookup-cite-header'
     エントリ本文を引用するときのスタイル、ヘッダ、プレフィクスを設定する。
     *note Cite Contents:: を参照。


File: lookup.info,  Node: Customize Face,  Prev: Customize Variables,  Up: Customize General

5.1.2 文字装飾のカスタマイズ
---------------------------------------

Lookup ではフェイス(文字装飾)の設定に Custom パッケージの `defface'
を用いています。これをカスタマイズするには、`M-x customize-group <RET>
lookup-faces <RET>' などとして設定を行なって下さい。

   Mule を利用しているなど、Custom がインストールされてない場合には、
Lookupの初期化ファイル(`~/.lookup/init.el')で設定を行なう必要
があります。これは次のようにして行ないます。

     ;; lookup-heading-1-face の設定
     (set-face-bold-p 'lookup-heading-1-face t)
     (set-face-foreground 'lookup-heading-1-face "SlateBlue")

   設定出来るフェイスは次の通りです。

`lookup-heading-1-face'
     本文の最初の見出し(通常、一行目)に付けられるフェイス。

`lookup-heading-2-face'
     本文が構造を持つ場合、二番目の見出しに付けられるフェイス。

`lookup-heading-3-face'
     本文が構造を持つ場合、三番目の見出しに付けられるフェイス。

`lookup-heading-4-face'
     本文が構造を持つ場合、四番目の見出しに付けられるフェイス。

`lookup-heading-5-face'
     本文が構造を持つ場合、五番目の見出しに付けられるフェイス。

`lookup-heading-low-face'
     本文が構造を持つ場合、あまり重要でない部分に付けられるフェイス。

`lookup-reference-face'
     本文のリンク部分に用いられるフェイス。

`lookup-refered-face'
     本文の参照済みリンクに用いられるフェイス。

   設定には次のような関数が利用出来ます。

`set-face-foreground'
     フェイスの文字色を指定する。

`set-face-background'
     フェイスの背景色を指定する。

`set-face-bold-p'
     フェイスを太字にする。

`set-face-italic-p'
     フェイスを斜体にする。

`set-face-underline-p'
     フェイスを下線付きにする。


File: lookup.info,  Node: Customize Option,  Next: Modules Setting,  Prev: Customize General,  Up: Customization

5.2 辞書とエージェントのカスタマイズ
====================================================

* Menu:

* Agent Options::               エージェント・オプション一覧
* Dictionary Options::          辞書オプション一覧


File: lookup.info,  Node: Modules Setting,  Prev: Customize Option,  Up: Customization

5.3 辞書のモジュール化と切り替え
==============================================

"モジュール"とは、複数の辞書の集合です。Lookupで多数の辞書を参照で
きるようになると、状況に応じて検索したい辞書の集合を切り替えたくなる場
合があります。その場合、モジュールを複数個つくり、切り替えると便利にな
ります。なお、起動時には必ず、`default'と呼ばれるモジュールが作ら
れています。

   新しいモジュールを作るには、辞書一覧から、「^」を押して、モジュールメ
ニューに行くか、直接、`M-x lookup-list-modules' で、モジュールリス
トにいってください。

   Lookupは、モジュールの設定を、`M-x lookup-exit' のタイミングで、
`~/.lookup/cache.el' ファイルに保存します。これは、 `.emacs.el'
の末尾に、`defcustom' 変数を保存するようなものだ
と思ってください。モジュールの編集をしたい場合は、このファイルを直接編
集すれば、次回の `M-x lookup-restart'開始時に、その設定が反映される
ようになります。

   検索時のモジュールの切り替えは、`M-x lookup-forward-module'や、 `M-x
lookup-backward-module'で行います。検索セッション中にこれを行
うと、現在のセッションのモジュールを切り替え、検索語をあらためて新しい
モジュールで検索し直します。それ以外の場合では、デフォルトモジュールを
切り替えます。

* Menu:

* Agent Options::               エージェント・オプション一覧
* Dictionary Options::          辞書オプション一覧


File: lookup.info,  Node: Agent Options,  Next: Dictionary Options,  Prev: Customize Option,  Up: Customize Option

5.3.1 エージェント・オプション一覧
------------------------------------------------

検索エージェントにオプションを設定することで、その振舞いのカスタマイズが
可能です。(*note Setup Option::)

オプションには全てのエージェントで共通に利用出来るものと、エージェント毎
に異なるものとがあります。検索エージェント別のオプションは、それぞれのエー
ジェントについての説明を参照して下さい。共通オプションとしては、次のもの
が利用出来ます。

`:alias'
     エージェントに別名を与える。エージェントID は普通 `CLASS+LOCATION'
     として与えられるが(*note Quick Startup::)、 このオプションにより
     LOCATION の部分を置き換えられる。当然ながら、 これは
     `lookup-search-agents' で設定しなければならない。次のように
     用いられる。

          (setq lookup-search-agents
                '((ndic "/usr/lib/dict" :alias "dict")))
          (lookup-use-package "ndic+dict" "dict-package")

`:title'
     検索エージェントにタイトルを設定する。これは現在、用いられていない。

`:enable'
     有効とする辞書名のリスト。(*note Setup Restriction::)

`:disable'
     無効とする辞書名のリスト。(*note Setup Restriction::)

`:select'
     選択する辞書名のリスト。(*note Setup Restriction::)

`:unselect'
     未選択にする辞書名のリスト。(*note Setup Restriction::)


File: lookup.info,  Node: Dictionary Options,  Prev: Agent Options,  Up: Customize Option

5.3.2 辞書オプション一覧
---------------------------------

辞書は、オプションを設定することによりカスタマイズが可能です。 (*note
Setup Option::)

   次のオプションが利用出来ます。

`:title'
     辞書のタイトルを指定する。

`:transformer'
     入力語の変換を指定する。これは複数形など単語の語尾を取り除いて元の単語
     を推測stemmingや、漢字の検索語をひらがなにするための関数で、文字列を受
     け取り候補となる文字列のリストを返さねばならない。次のように設定する。
          (lookup-set-dictionary-option "agent:DICT" :transformer 'transformer-function)

`:arranges'
     arrange 関数のリスト（追加用）。

`:arrange-table'
     arrange 関数のリスト（置換用）。

`:gaiji-table'
     外字の置き換えテーブル。

`:cite-style'
`:cite-header'
`:cite-prefix'
     それぞれ、`lookup-cite-style', `lookup-cite-header',
     `lookup-cite-prefix' の代わりに優先して用いられる。 (*note Cite
     Contents::)

   この内、`:title' と `:gaiji-table' を除く全てのオプションは、
エージェント・オプションとして設定することも可能です。

エージェントによっては、これ以外にも特別な辞書オプションが利用出来る場合
があります。それぞれのエージェントの説明を参照して下さい。


File: lookup.info,  Node: Information,  Next: Search Agents,  Prev: Customization,  Up: Top

Appendix A 更なる情報を得るには
*****************************************

   * ホームページ

     `http://lookup.sourceforge.net'

   * メーリングリスト

     `https://lists.sourceforge.net/lists/listinfo/lookup-list'
     にて、メーリングリストへの加入手続きを行ってください。



File: lookup.info,  Node: Search Agents,  Next: Concept Index,  Prev: Information,  Up: Top

Appendix B 検索エージェント一覧
*****************************************

* Menu:

* ndic::                        DICTD 辞書から検索する
* ndeb::                        CD-ROM 辞書から検索する
* ndpdic::                      PDIC 辞書から検索する
* ndbtonic::                    BTONIC 辞書から検索する
* ndsary::                      Suffix Arrayを使って検索する
* ndsimple::                    バッファ内のテキスト辞書を検索する
* ndtp::                        NDTP サーバから検索する
* ndict::                       DICT サーバから検索する
* ndsrd::                       ランダムハウス英語辞典Windows版を検索する
* ndmecab::                     日本語の読みを調べる
* ndspell::                     スペルチェックとスペル検索
* ndcookie::                    cookie ファイルから検索する


File: lookup.info,  Node: ndic,  Next: ndeb,  Prev: Search Agents,  Up: Search Agents

B.1 ndic
========

`ndic' は、主にフリーに配布されている辞書から、手軽に検索を行なうことを
目的とした検索エージェントです。辞書以外に他に用意すべきものもないので、
とりあえず Lookup を試してみるにはちょうどいいでしょう。

   dictd 辞書は ndict
エージェントでも利用可能です。性能を重視する場合には、
そちらを参照してみて下さい。(*note ndict::)

* Menu:

* ndic prepare::                ndic の準備
* ndic setup::                  ndic の設定
* ndic dictionary::             ndic の辞書
* ndic customize::              ndic のカスタマイズ


File: lookup.info,  Node: ndic prepare,  Next: ndic setup,  Prev: ndic,  Up: ndic

B.1.1 ndic の準備
--------------------

ndic では現在、dictd-1.4.x 用に用意された辞書 と SDIC 辞書から検索を
行なうことが可能となっています。いくつかのフリーな辞書が、Lookup
のホーム ページから入手出来ます。

Lookup dictionary collection
     `http://openlab.ring.gr.jp/lookup/dicts/'

   dictd 辞書(`*.index' と `*.dict')やSDIC 辞書(`*.sdic')
は適当なディレクトリにインストールして下さい。dictd 辞書は
圧縮(dictzip)しておいても 構いません。必要な準備はこれだけです。


File: lookup.info,  Node: ndic setup,  Next: ndic dictionary,  Prev: ndic prepare,  Up: ndic

B.1.2 ndic の設定
--------------------

ndic は次のように設定します。

     (ndic DIRECTORY)

   DIRECTORY には辞書のあるディレクトリを指定します。オプションその他
の特別な設定はありません。

   例えば次のようになります。

     (setq lookup-search-agents
           '((ndic "/usr/lib/dict")))


File: lookup.info,  Node: ndic dictionary,  Next: ndic customize,  Prev: ndic setup,  Up: ndic

B.1.3 ndic の辞書
--------------------

指定したディレクトリに含まれる、dictd辞書のインデックスファイル(`*.index')
や SDIC 辞書(`*.sdic')が辞書として認識されます。
その拡張子を取り除いたファイル名が辞書名となります。辞書のタイトルは自動的に認識されます。

   全文検索を除く、全ての検索方式が有効です。(*note Search Methods::)


File: lookup.info,  Node: ndic customize,  Prev: ndic dictionary,  Up: ndic

B.1.4 ndic のカスタマイズ
--------------------------------

辞書が dictzip コマンドにより圧縮してある場合、その展開に dictzip を呼び
出します。変数 `ndic-dictzip-program' により、そのプログラム名を指
定します。デフォルトでは "dictzip" になっています。


File: lookup.info,  Node: ndeb,  Next: ndpdic,  Prev: ndic,  Up: Search Agents

B.2 ndeb
========

`ndeb' は、電子ブックや EPWING 規約に準拠した CD-ROM 書籍の個人利用に向
いた検索エージェントです。eblook という外部コマンドを用いることで、特別
な設定の必要なしに手元の CD-ROM 辞書が利用出来ます。

* Menu:

* ndeb prepare::                ndeb の準備
* ndeb setup::                  ndeb の設定
* ndeb dictionary::             ndeb の辞書
* ndeb customize::              ndeb のカスタマイズ


File: lookup.info,  Node: ndeb prepare,  Next: ndeb setup,  Prev: ndeb,  Up: ndeb

B.2.1 ndeb の準備
--------------------

ndeb は外部コマンドとして eblook を使用します。eblook とは、電子ブックや
EPWING 規約に従った CD-ROM
辞書をアクセスするための簡易検索コマンドです。

   ndeb は外部コマンドとして eblook を利用しています。eblook
は、電子ブック や EPWING といった規約に従った CD-ROM
書籍をアクセスするためのツールです。

CD-ROM の準備
................

利用出来る CD-ROM は、一般の書店で購入することが出来ます。大体、数千円か
ら数万円程度で売っています。これから購入する場合には、それが EPWING とい
う規格に従っていることを確認して下さい。パッケージの裏に EPWING
というマー クが付いているはずです。

   CD-ROM
は適当なディレクトリにマウントしておいて下さい。ディスクに余裕が
ある場合には、ハードディスクにコピーしておいても構いません。ただし、コピー
が許されるかどうかは著作者に権利があるので、辞書の説明書を注意して読んで
下さい。

   辞書は eblook
に附属の圧縮コマンドで圧縮しておくことも可能です。大体、 1/2 〜 1/3
のサイズにまで縮小されます。

eblook
......

eblook は次のところから入手可能です。UNIX 版と、MS Windows で利用出来る
ようにしたバイナリの情報が得られます。

eblook
     `http://openlab.ring.gr.jp/lookup/eblook/'

   インストールは適当なディレクトリに行なって下さい。

Appendix
     `http://www.sra.co.jp/people/m-kasahr/eb/'

あるいは利用する辞書の補助パッケージがある場合には、そこで独自に外字の置
き換えテーブルが用意されている場合があります。目的の補助パッケージがない
か確認してみて下さい。(*note Setup Package::)


File: lookup.info,  Node: ndeb setup,  Next: ndeb dictionary,  Prev: ndeb prepare,  Up: ndeb

B.2.2 ndeb の設定
--------------------

ndeb は、次のように設定します。

     (ndeb DIRECTORY)

   DIRECTORY には辞書のあるディレクトリを指定します。

   次のエージェント・オプションが利用できます。

`:appendix'
     eblook が利用する Appendix のあるディレクト リを指定します(*note
     (eblook)Appendix::)。省略された場合には、辞書オ プション
     `:gaiji-table' に従って外字が置き換えられます。

`:coding'
     eblook に対する process-coding-system。 デフォルトは `euc-jp'。

   次の辞書オプションが利用できます。

`:stop-code'
     辞書の出力の終了コード。一部の辞書では、これを設定しないと表示がおかしく
     なることがある。FAQ を参照。

   例えば次のようになります。

     (setq lookup-search-agents
           '((ndeb "/cdrom" :appendix "/usr/local/share/eb/appendix")))


File: lookup.info,  Node: ndeb dictionary,  Next: ndeb customize,  Prev: ndeb setup,  Up: ndeb

B.2.3 ndeb の辞書
--------------------

CD-ROM 書籍に含まれる全ての辞書が有効となります。辞書の名前とタイトルは
eblook から与えられます。

   検索方式は「完全一致検索」「前方一致検索」「後方一致検索」です。
(*note Search Methods::)

   ndeb はメニューコマンドに対応しています。(*note Specify Dictionary::)


File: lookup.info,  Node: ndeb customize,  Prev: ndeb dictionary,  Up: ndeb

B.2.4 ndeb のカスタマイズ
--------------------------------

変数 `ndeb-program-name' により、eblook のコマンド名を指定します。
デフォルトでは "eblook" となっています。

   変数 `ndeb-prompt-string' により、eblook のプロンプトを指定します。
デフォルトでは "eblook> " となっています。


File: lookup.info,  Node: ndpdic,  Next: ndbtonic,  Prev: ndeb,  Up: Search Agents

B.3 ndpdic
==========

`ndpdic'は、PDICフォーマット（現在はver5.0以降のみ対応）の辞書に対して
検索することを目的としたエージェントです。


File: lookup.info,  Node: ndbtonic,  Next: ndsary,  Prev: ndpdic,  Up: Search Agents

B.4 ndbtonic
============

`ndbtonic'は、BTONIC辞書（展開してXMLにしたもの）に対して、 suffix
array インデックスを付加して高速に検索することを目的とした
エージェントです。


File: lookup.info,  Node: ndsary,  Next: ndsimple,  Prev: ndbtonic,  Up: Search Agents

B.5 ndsary
==========

`ndsary'は、おおきなXML辞書、またはテキストベースの辞書に対して、
suffix array インデックスを付加して高速に検索することを目的とした
エージェントです。


File: lookup.info,  Node: ndsimple,  Next: ndtp,  Prev: ndsary,  Up: Search Agents

B.6 ndsimple
============

`ndsimple'は、主に小さなテキスト辞書、またはバッファで編集中の辞書から
検索することを目的とするエージェントです。


File: lookup.info,  Node: ndtp,  Next: ndict,  Prev: ndsimple,  Up: Search Agents

B.7 ndtp
========

`ndtp' は、主にローカル・ネットワークで共有された CD-ROM 辞書から検索を
行なうことを目的とした検索エージェントです。NDTP(Network Dictionary
Transport Protocol)のバージョン 2 に対応したクライアントとなっています。

辞書を共有する必要のない場合には、より手軽に設定できるエージェントとして
ndeb が利用可能です。(*note ndeb::)

* Menu:

* ndtp prepare::                ndtp の準備
* ndtp setup::                  ndtp の設定
* ndtp dictionary::             ndtp の辞書


File: lookup.info,  Node: ndtp prepare,  Next: ndtp setup,  Prev: ndtp,  Up: ndtp

B.7.1 ndtp の準備
--------------------

ndtp を利用するには NDTP サーバが必要です。自分のネットワークにサーバが
用意されてない場合には、自分で準備する必要があります。

NDTP server
...........

NDTP サーバとして、dserver と NDTPD
の二つが入手可能です。どちらも電子ブッ クや EPWING に準拠した CD-ROM
書籍を扱うためのサーバです。

   `dserver' は、以前から使われている辞書サーバで、NDTP
の元となったプログ ラムです。次のところから入手可能です。

dserver
     `ftp://ftp.pu-toyama.ac.jp/pub/misc/'

   `NDTPD' は、新しく作られている辞書サーバで、dserver
を置き換えられるよう 開発されています。次のところから入手可能です。

NDTPD
     `http://www.sra.co.jp/people/m-kasahr/ndtpd/'

サーバの設定については、それぞれのプログラムに附属のドキュメントを参照
して下さい。


File: lookup.info,  Node: ndtp setup,  Next: ndtp dictionary,  Prev: ndtp prepare,  Up: ndtp

B.7.2 ndtp の設定
--------------------

ndtp は、次のように設定します。

     (ndtp SERVER)

   SERVER には NDTP サーバのホスト名を指定します。

   次のエージェント・オプションが利用できます。

`:service'
     NDTP のサービス名。

`:port'
     NDTP のポート番号。 サービス名とポート番号の両方を省略した場合は、
     サービス名として "ndtp" が利用されます。

`:account'
     サーバへのアカウント。これはログに残るという以上の意味はない。
     デフォルトは "<user>@<host>")。

`:coding'
     サーバに対する process-coding-system。デフォルトは `euc-jp'。

   例えば次のようになります。

     (setq lookup-search-agents
           '((ndtp "dserver" :port 2010 :account "kei@bamboo")))


File: lookup.info,  Node: ndtp dictionary,  Prev: ndtp setup,  Up: ndtp

B.7.3 ndtp の辞書
--------------------

サーバが扱っている全ての辞書が有効となります。辞書の名前とタイトルはサー
バから与えられます。

   検索方式は「完全一致検索」「前方一致検索」「後方一致検索」です。
(*note Search Methods::)


File: lookup.info,  Node: ndict,  Next: ndsrd,  Prev: ndtp,  Up: Search Agents

B.8 ndict
=========

`ndict' は、主にインターネットで公開されている辞書サーバから検索を行なう
ことを目的とした検索エージェントです。これは DICT プロトコル(RFC 2229)に
対応したクライアントとなっています。

   DICT サーバの一つである dictd
向けにフリーに配布されている辞書は、ndic
エージェントで検索することも可能です。手軽に検索を試してみたい方は、そち
らも参照してみて下さい。(*note ndic::)

* Menu:

* ndict prepare::               ndict の準備
* ndict setup::                 ndict の設定
* ndict dictionary::            ndict の辞書


File: lookup.info,  Node: ndict prepare,  Next: ndict setup,  Prev: ndict,  Up: ndict

B.8.1 ndict の準備
---------------------

ndict は DICT プロトコルに対応した辞書サーバにアクセスします。サーバに接
続できる環境であれば、特別な準備は何も必要ありません。自分でサーバを導入
する場合には、DICT プロジェクトから dictd が入手可能です。

DICT project
     `http://www.dict.org'

附属のドキュメントに従って適切に辞書、及びサーバを導入して下さい。dictd
で利用できるいくつかの辞書は、上記ページ以外にも Lookup のホームページか
らも入手可能です。

Lookup dictionary collection
     `http://openlab.ring.gr.jp/lookup/dicts/'


File: lookup.info,  Node: ndict setup,  Next: ndict dictionary,  Prev: ndict prepare,  Up: ndict

B.8.2 ndict の設定
---------------------

ndict は、次のように設定します。

     (ndict SERVER)

   SERVER には DICT サーバのホスト名を指定します。

   次のエージェント・オプションが利用できます。

`:service'
     DICT のサービス名。

`:port'
     DICT のポート番号。 サービス名とポート番号の両方を省略した場合は、
     サービス名として変数 `ndict-service-name'
     の値("dict")が利用されます。

`:coding'
     サーバに対する process-coding-system。 デフォルトは `euc-jp-dos'。

`:auth'
     サーバへの authentication(認証)を指定する。ユーザ名とパスワードの
     組(cons)によって表わす。

`:methods'
     サーバが対応している検索方式のリストを指定する。デフォルトでは、
     サーバのソフトウェアを見て検索方式を予測している。というのも、
     DICT プロトコルでは検索方式はサーバが自由に設けることが出来るので、
     プログラムからは完全な自動判定が出来ない。従ってユーザが対応を指定する
     必要がある。dictd-1.4.x を普通に用いる場合には、これを指定する
     必要はない。次の `:method-table' も参照。

`:method-table'
     Lookup の検索方式とサーバの strategy との対応関係を alist
     で指定する。 例えばサーバが dictd-1.4.x である場合、これは自動的に

          ((keyword . "exact") (prefix . "prefix") (suffix . "suffix")
           (substring . "substring") (exact . "exact") (regexp . "re"))

     のように設定される。上の `:methods' も同時に指定する必要がある。

   例えば次のようになります。

     (setq lookup-search-agents
           '((ndict "dict.org" :auth ("kei" . "password"))))


File: lookup.info,  Node: ndict dictionary,  Prev: ndict setup,  Up: ndict

B.8.3 ndict の辞書
---------------------

サーバが扱っている全ての辞書が有効となります。辞書の名前とタイトルはサー
バから与えられます。(しかし、サーバから与えられるタイトルはかなり長い場
合があるので、自分で再設定した方がよいかもしれません (*note Dictionary
Options::))

   検索方式は相手のサーバに依存します。サーバが dictd-1.4.x
をそのまま用い
ている場合には、「全文検索」以外の全ての検索が有効となります。でなければ、
「キーワード検索」と「前方一致検索」のみ有効となります。 (*note Search
Methods::)


File: lookup.info,  Node: ndsrd,  Next: ndmecab,  Prev: ndict,  Up: Search Agents

B.9 ndsrd
=========

`ndsrd' は、ランダムハウス英語辞典Windows版を検索する検索エージェントで
す。外部コマンドとして太田純さん作の CSRD を用います。

* Menu:

* ndsrd prepare::               ndsrd の準備
* ndsrd setup::                 ndsrd の設定
* ndsrd dictionary::            ndsrd の辞書
* ndsrd customize::             ndsrd のカスタマイズ


File: lookup.info,  Node: ndsrd prepare,  Next: ndsrd setup,  Prev: ndsrd,  Up: ndsrd

B.9.1 ndsrd の準備
---------------------

ndsrd はバージョン 1.0 以降の CSRD に対応しています。CSRD
は次のサイトから入手出来ます。

CSRD
     `http://openlab.ring.gr.jp/edict/csrd/'

   CSRDは附属のドキュメントに従ってインストールを行なってください。


File: lookup.info,  Node: ndsrd setup,  Next: ndsrd dictionary,  Prev: ndsrd prepare,  Up: ndsrd

B.9.2 ndsrd の設定
---------------------

ndsrd は、次のように設定します。

     (ndsrd DIRECTORY
     	       :fmt "/somewhere/csrd.fmt"
     	       :gai "/somewhere/csrd.gai")


File: lookup.info,  Node: ndsrd dictionary,  Next: ndsrd customize,  Prev: ndsrd setup,  Up: ndsrd

B.9.3 ndsrd の辞書
---------------------

ランダムハウス英語辞典Windows版の辞書データです。


File: lookup.info,  Node: ndsrd customize,  Prev: ndsrd dictionary,  Up: ndsrd

B.9.4 ndsrd のカスタマイズ
---------------------------------

変数 `ndsrd-program-name' により、CSRD のコマンド名を指定します。
デフォルトでは "csrd" となっています。


File: lookup.info,  Node: ndmecab,  Next: ndspell,  Prev: ndsrd,  Up: Search Agents

B.10 ndmecab
============

`ndmecab'
は、検索ではなく日本語の読みを調べるための検索エージェントです。
漢字の含まれる検索語を指定した場合、漢字かな変換プログラム Mecab を用い
てその読みを調べて表示します。

* Menu:

* ndmecab prepare::             ndmecab の準備
* ndmecab setup::               ndmecab の設定
* ndmecab dictionary::          ndmecab の辞書
* ndmecab customize::           ndmecab のカスタマイズ


File: lookup.info,  Node: ndmecab prepare,  Next: ndmecab setup,  Prev: ndmecab,  Up: ndmecab

B.10.1 ndmecab の準備
------------------------

Mecab は漢字かな変換プログラムで、次のところから mecab-0.98.tar.gz(本
体ファイルおよびIPA辞書ファイル)の名称で入手可能です。

mecab
     `http://mecab.sourceforge.net/'


File: lookup.info,  Node: ndmecab setup,  Next: ndmecab dictionary,  Prev: ndmecab prepare,  Up: ndmecab

B.10.2 ndmecab の設定
------------------------

ndmecab は、次のように設定します。

     (ndmecab)

   つまり、それを `lookup-search-agents' のリストに加えるだけです。
オプションその他の特別な設定はありません。


File: lookup.info,  Node: ndmecab dictionary,  Next: ndmecab customize,  Prev: ndmecab setup,  Up: ndmecab

B.10.3 ndmecab の辞書
------------------------

ndmecab 自体が一つの辞書となります。辞書名は変数 `ndmecab-program-name'
で指定される Mecab プログラムの名前です。タイトルは変数
`ndmecab-dictionary-title' により与えられます。

キーワード検索において、漢字の含まれる検索語が指定されたとき出力されます。


File: lookup.info,  Node: ndmecab customize,  Prev: ndmecab dictionary,  Up: ndmecab

B.10.4 ndmecab のカスタマイズ
------------------------------------

変数 `ndmecab-program-name' により、Mecab のコマンド名を指定します。
デフォルトでは "mecab" となっています。

   変数 `ndmecab-dictionary-title' により、ndmecab
辞書のタイトルを指定し ます。デフォルトでは "漢字かな辞典"
となっています。

   変数 `ndmecab-content-format' により、出力内容のフォーマットをリスト
で指定します。リストの各要素には次のものが利用できます。

`t'
     検索語が挿入される。

文字列
     それがそのまま挿入される。

文字列のリスト
     それをオプション引数として Mecab を呼び出し、その結果が挿入される。


File: lookup.info,  Node: ndspell,  Next: ndcookie,  Prev: ndmecab,  Up: Search Agents

B.11 ndspell
============

`ndspell' は、Lookup
でスペルチェックを行なうための検索エージェントです。
他のエージェントで独自にスペルチェックを行なわずとも、ndspell がそれを処
理して自動的に再検索を行なってくれます。また、スペルの検索も行なえます。

* Menu:

* ndspell prepare::             ndspell の準備
* ndspell setup::               ndspell の設定
* ndspell dictionary::          ndspell の辞書
* ndspell customize::           ndspell のカスタマイズ


File: lookup.info,  Node: ndspell prepare,  Next: ndspell setup,  Prev: ndspell,  Up: ndspell

B.11.1 ndspell の準備
------------------------

ndspell は外部コマンドとして Ispell と grep を利用しています。Ispell は
対話型のスペルチェックコマンドで、grep は言わずと知れた UNIX
ツールです。 どちらも GNU の FTP サイトなどから入手可能です。

GNU ftp directory
     `ftp://ftp.gnu.org/pub/GNU/'


File: lookup.info,  Node: ndspell setup,  Next: ndspell dictionary,  Prev: ndspell prepare,  Up: ndspell

B.11.2 ndspell の設定
------------------------

ndspell は、次のように設定します。

     (ndspell)

   つまり、それを `lookup-search-agents' のリストに加えるだけです。
オプションその他の特別な設定はありません。


File: lookup.info,  Node: ndspell dictionary,  Next: ndspell customize,  Prev: ndspell setup,  Up: ndspell

B.11.3 ndspell の辞書
------------------------

ndspell 自体が一つの辞書となります。辞書名は変数
`ndspell-ispell-program' で指定される Ispell コマンドの名前です。
タイトルは変数 `ndspell-dictionary-title' により与えられます。

   次の検索法が有効となります。

`キーワード検索'
     検索語をスペルチェックし、誤りがある場合には候補をエントリとして生成。

`前方一致検索'
`後方一致検索'
`部分一致検索'
`正規表現検索'
     パターンにマッチする単語を検索し、エントリを生成。

   どの場合も、生成されたエントリは普通に Entry
バッファに出力され、それを
選択して内容を表示しようとした段階で再検索が行なわれます。実際に試してみ
て下さい。


File: lookup.info,  Node: ndspell customize,  Prev: ndspell dictionary,  Up: ndspell

B.11.4 ndspell のカスタマイズ
------------------------------------

変数 `ndspell-ispell-program' により、Ispell のコマンド名を指定しま
す。デフォルトでは "ispell" となっています。

   変数 `ndspell-grep-program' により、grep のコマンド名を指定します。
デフォルトでは "grep" となっています。

   変数 `ndspell-words-dictionary' により、スペルを検索する際の単語辞
書を指定します。デフォルトでは `/usr/share/dict/words' となっていま す。

   変数 `ndspell-dictionary-title' により、ndspell 辞書のタイトルを指
定します。デフォルトでは "Spell Checker" となっています。

   変数 `ndspell-search-dictionaries' により、再検索の対象とする辞書を
その辞書ID のリストとして指定します。デフォルトでは `t' となってお
り、この場合、選択されている全ての辞書から再検索が行なわれます。


File: lookup.info,  Node: ndcookie,  Prev: ndspell,  Up: Search Agents

B.12 ndcookie
=============

`ndcookie' は、cookie ファイル(引用集)から検索を行なうための検索エージェ
ントです。おまけみたいなもんです。

* Menu:

* ndcookie prepare::            ndcookie の準備
* ndcookie setup::              ndcookie の設定
* ndcookie dictionary::         ndcookie の辞書


File: lookup.info,  Node: ndcookie prepare,  Next: ndcookie setup,  Prev: ndcookie,  Up: ndcookie

B.12.1 ndcookie の準備
-------------------------

利用出来るファイルの例としては、Emacs に附属の Zippy
ファイルがあります。

Zippy
     `$(EMACS)/etc/yow.lines'


File: lookup.info,  Node: ndcookie setup,  Next: ndcookie dictionary,  Prev: ndcookie prepare,  Up: ndcookie

B.12.2 ndcookie の設定
-------------------------

ndcookie は、次のように設定します。

     (ndcookie FILE)

   FILE には、利用する cookie ファイルを指定します。ファイルが相対パ
スで指定された場合、変数 `data-directory' からの相対パスとして扱わ
れます。

   例えば次のようになります。

     (setq lookup-search-agents
           '((ndcookie "yow.lines")))


File: lookup.info,  Node: ndcookie dictionary,  Prev: ndcookie setup,  Up: ndcookie

B.12.3 ndcookie の辞書
-------------------------

指定した cookie ファイルが一つの辞書となります。辞書名はファイル名に一致
します。タイトルは設定されません。

   全ての検索方式が有効となります。(*note Search Methods::)


File: lookup.info,  Node: Concept Index,  Next: Command Index,  Prev: Search Agents,  Up: Top

コンセプト一覧
*********************

 [index ]
* Menu:

* Content バッファ:                      Quick Search.         (line 38)
* Entry バッファ:                        Quick Search.         (line 33)
* Overview モード:                       Quick View.           (line 45)
* エージェントID:                        Quick Startup.        (line 47)
* オプション:                            Setup Option.         (line 12)
* キーワード検索:                        Search Methods.       (line 56)
* パターン検索:                          Search Methods.       (line  6)
* モジュール:                            Modules Setting.      (line  6)
* リファレンス:                          Search Methods.       (line 69)
* 全文検索:                              Search Methods.       (line 63)
* 前方一致検索:                          Search Methods.       (line 24)
* 単語検索:                              Default Method.       (line  6)
* 完全一致検索:                          Search Methods.       (line 19)
* 後方一致検索:                          Search Methods.       (line 29)
* 検索エージェント:                      Quick Setup.          (line  6)
* 正規表現検索:                          Search Methods.       (line 50)
* 補助パッケージ:                        Setup Package.        (line  6)
* 辞書ID:                                Quick Startup.        (line 47)
* 辞書一覧バッファ:                      Quick Startup.        (line 38)
* 辞書名:                                Quick Startup.        (line 47)
* 部分一致検索:                          Search Methods.       (line 34)


File: lookup.info,  Node: Command Index,  Next: Variable Index,  Prev: Concept Index,  Up: Top

コマンド一覧
******************

 [index ]
* Menu:

* lookup:                                Startup Commands.     (line  6)
* lookup-exit:                           Modules Setting.      (line 16)
* lookup-forward-module:                 Modules Setting.      (line 23)
* lookup-list-modules:                   Modules Setting.      (line 12)
* lookup-pattern:                        Search Commands.      (line  9)
* lookup-pattern-full-screen:            Search Commands.      (line 78)
* lookup-pattern-other-frame:            Search Commands.      (line 78)
* lookup-region:                         Search Commands.      (line 20)
* lookup-region-full-screen:             Search Commands.      (line 78)
* lookup-region-other-frame:             Search Commands.      (line 78)
* lookup-restart:                        Startup Commands.     (line 27)
* lookup-secondary:                      Search Commands.      (line 48)
* lookup-secondary-full-screen:          Search Commands.      (line 78)
* lookup-secondary-other-frame:          Search Commands.      (line 78)
* lookup-select-do-select-all:           Specify Dictionary.   (line 44)
* lookup-select-do-select-only:          Specify Dictionary.   (line 44)
* lookup-selection:                      Search Commands.      (line 26)
* lookup-selection-full-screen:          Search Commands.      (line 78)
* lookup-selection-other-frame:          Search Commands.      (line 78)
* lookup-set-agent-option:               Setup Option.         (line 64)
* lookup-set-dictionary-option:          Setup Option.         (line 32)
* lookup-suspend:                        Startup Commands.     (line 16)
* lookup-word:                           Search Commands.      (line 23)
* lookup-word-full-screen:               Search Commands.      (line 78)
* lookup-word-other-frame:               Search Commands.      (line 78)


File: lookup.info,  Node: Variable Index,  Prev: Command Index,  Up: Top

変数一覧
************

 [index ]
* Menu:

* lookup-agent-options-alist:            Setup Option.        (line  64)
* lookup-cite-header:                    Cite Contents.       (line  31)
* lookup-cite-prefix:                    Cite Contents.       (line  39)
* lookup-cite-style:                     Cite Contents.       (line   9)
* lookup-default-agent-options:          Setup Option.        (line  64)
* lookup-default-dictionary-options:     Setup Option.        (line  50)
* lookup-default-method:                 Default Method.      (line  24)
* lookup-dictionary-options-alist:       Setup Option.        (line  16)
* lookup-fill-column:                    Customize Variables. (line  13)
* lookup-frame-alist:                    Search Commands.     (line 123)
* lookup-heading-1-face:                 Customize Face.      (line  20)
* lookup-heading-2-face:                 Customize Face.      (line  23)
* lookup-heading-3-face:                 Customize Face.      (line  26)
* lookup-heading-4-face:                 Customize Face.      (line  29)
* lookup-heading-5-face:                 Customize Face.      (line  32)
* lookup-heading-low-face:               Customize Face.      (line  35)
* lookup-init-file:                      Setup Example.       (line   6)
* lookup-load-hook:                      Initialization.      (line  31)
* lookup-max-hits:                       Customize Variables. (line  30)
* lookup-max-text:                       Customize Variables. (line  30)
* lookup-refered-face:                   Customize Face.      (line  41)
* lookup-reference-face:                 Customize Face.      (line  38)
* lookup-save-configuration <1>:         Customize Variables. (line  19)
* lookup-save-configuration:             Startup Commands.    (line  23)
* lookup-search-agents:                  Setup Basis.         (line  11)
* lookup-use-mecab:                      Search Commands.     (line  12)
* lookup-window-height:                  Customize Variables. (line  16)
* ndeb-program-name:                     ndeb customize.      (line   6)
* ndeb-prompt-string:                    ndeb customize.      (line   9)
* ndic-dictzip-program:                  ndic customize.      (line   6)
* ndict-service-name:                    ndict setup.         (line  18)
* ndmecab-content-format:                ndmecab customize.   (line  13)
* ndmecab-dictionary-title:              ndmecab customize.   (line   9)
* ndmecab-program-name:                  ndmecab customize.   (line   6)
* ndspell-dictionary-title:              ndspell customize.   (line  15)
* ndspell-grep-program:                  ndspell customize.   (line   9)
* ndspell-ispell-program:                ndspell customize.   (line   6)
* ndspell-search-dictionaries:           ndspell customize.   (line  18)
* ndspell-words-dictionary:              ndspell customize.   (line  12)
* ndsrd-program-name:                    ndsrd customize.     (line   6)



Tag Table:
Node: Top1043
Node: Getting Started1625
Node: Quick Prepare1902
Node: Quick Setup2990
Node: Quick Example5974
Node: Quick Startup8007
Node: Quick Search12255
Node: Quick View15109
Node: Dictionary Setup17638
Node: Free Dictionaries18451
Node: SDIC Dictionaries19277
Node: dictd Dictionaries22102
Node: FreePWING Dictionaries24372
Node: PDIC Dictionaries24805
Node: Other XML Dictionaries24973
Node: CD-ROM Dictionaries25132
Node: EB/EPWING Dictionary25946
Node: Original Dictionary28425
Node: Network Dictionary28858
Node: NDTP Server29746
Node: DICT Server30524
Node: Miscellaneous Dictionaries31174
Node: ndnmz agent31737
Node: ndmecab agent31943
Node: ndspell agent32841
Node: ndcookie agent33840
Node: How to Lookup34436
Node: Setup Dictionary35441
Node: Setup Agent35783
Node: Setup Basis36221
Node: Setup Option38844
Node: Setup Restriction43749
Node: Setup Package45660
Node: Setup Command46733
Node: Setup Others47147
Node: Setup Query Expansion47388
Node: Stemming48013
Node: Spell Checking50621
Node: Universal Query Expansion52582
Node: Setup Example54051
Node: Initialization54785
Node: ~/.emacs.el56634
Node: ~/.lookup/init.el57616
Node: site-start.el58437
Node: Setup Variables59376
Node: Setup Functions61655
Node: Advanced Features62834
Node: Startup Commands63403
Node: Search String65262
Node: Search Commands65782
Ref: Search Commands-Footnote-171490
Node: Default Method71554
Node: Search Methods74020
Node: See Result78808
Node: See Entries79569
Node: See Contents80812
Node: Make Reference82136
Node: Cite Contents82798
Ref: Cite Contents-Footnote-185386
Node: Specify Dictionary85482
Node: Customization88984
Node: Customize General89385
Node: Customize Variables89985
Node: Customize Face91270
Node: Customize Option93432
Node: Modules Setting93800
Node: Agent Options95641
Node: Dictionary Options97349
Node: Information98930
Node: Search Agents99357
Node: ndic100379
Node: ndic prepare101158
Node: ndic setup101841
Node: ndic dictionary102300
Node: ndic customize102839
Node: ndeb103246
Node: ndeb prepare103833
Node: ndeb setup105905
Node: ndeb dictionary106982
Node: ndeb customize107481
Node: ndpdic107919
Node: ndbtonic108190
Node: ndsary108506
Node: ndsimple108833
Node: ndtp109112
Node: ndtp prepare109810
Node: ndtp setup110904
Node: ndtp dictionary111856
Node: ndict112241
Node: ndict prepare113022
Node: ndict setup113808
Node: ndict dictionary115812
Node: ndsrd116588
Node: ndsrd prepare117088
Node: ndsrd setup117495
Node: ndsrd dictionary117791
Node: ndsrd customize118010
Node: ndmecab118301
Node: ndmecab prepare118895
Node: ndmecab setup119260
Node: ndmecab dictionary119637
Node: ndmecab customize120142
Node: ndspell121020
Node: ndspell prepare121676
Node: ndspell setup122144
Node: ndspell dictionary122521
Node: ndspell customize123496
Node: ndcookie124585
Node: ndcookie prepare125003
Node: ndcookie setup125299
Node: ndcookie dictionary125851
Node: Concept Index126226
Node: Command Index128035
Node: Variable Index130019

End Tag Table


Local Variables:
coding: utf-8
End:
